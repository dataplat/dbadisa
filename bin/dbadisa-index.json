[
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsBrowser -ComputerName sql2016, sql2019\nDisables and stops the SQL Server Browser service on sql2016 and sql2019 if no named instances exist",
    "Description": "Disables and stops the SQL Server Browser service on computers with no named instances",
    "CommandName": "Disable-DbsBrowser",
    "Synopsis": "Disables and stops the SQL Server Browser service on computers with no named instances",
    "Alias": "",
    "Tags": [
      "V-79353",
      "V-79349"
    ],
    "Syntax": "Disable-DbsBrowser [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsBrowser",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Tracy Boggiano (@TracyBoggiano), databasesuperhero.com",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsCEIP -ComputerName sql2016, sql2017, sql2012\nDisables all instances of CEIP on sql2016, sql2017 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsCEIP -ComputerName sql2016, sql2017, sql2012 -Credential ad\\altdba\nDisables all instances of CEIP on sql2016, sql2017 and sql2012 using alternative Windows credentials",
    "Description": "Disables all instances of CEIP on a server via both services and the registry (x64 and x86)",
    "CommandName": "Disable-DbsCEIP",
    "Synopsis": "Disables all instances of CEIP on a server via both services and the registry (x64 and x86)",
    "Alias": "",
    "Tags": [
      "V-79313",
      "V-79315"
    ],
    "Syntax": "Disable-DbsCEIP [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsCEIP",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsDbContainment -SqlInstance sql2017, sql2016, sql2012\nDisables database containment features on sql2017, sql2016 and sql2012",
    "Description": "Disables database containment features",
    "CommandName": "Disable-DbsDbContainment",
    "Synopsis": "Disables database containment features",
    "Alias": "",
    "Tags": "V-79061",
    "Syntax": "Disable-DbsDbContainment [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsDbContainment",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsExternalScripts -SqlInstance sql2017, sql2016, sql2012\nDisables external scripts on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsExternalScripts -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Description": "Disables external scripts",
    "CommandName": "Disable-DbsExternalScripts",
    "Synopsis": "Disables external scripts",
    "Alias": "",
    "Tags": "V-79347",
    "Syntax": "Disable-DbsExternalScripts [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsExternalScripts",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsFilestreamAccess -SqlInstance sql2017, sql2016, sql2012\nDisables filestream access on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsFilestreamAccess -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Description": "Disables non-compliant filestream access settings",
    "CommandName": "Disable-DbsFilestreamAccess",
    "Synopsis": "Disables non-compliant filestream access settings",
    "Alias": "",
    "Tags": [
      "V-79329",
      "NonCompliantResults"
    ],
    "Syntax": "Disable-DbsFilestreamAccess [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsFilestreamAccess",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsHadoopConnectivity -SqlInstance sql2017, sql2016, sql2012\nDisables Hadoop connectivity on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsHadoopConnectivity -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Description": "Disables non-compliant Hadoop connectivity settings",
    "CommandName": "Disable-DbsHadoopConnectivity",
    "Synopsis": "Disables non-compliant Hadoop connectivity settings",
    "Alias": "",
    "Tags": [
      "V-79341",
      "NonCompliantResults"
    ],
    "Syntax": "Disable-DbsHadoopConnectivity [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsHadoopConnectivity",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsMixedMode -SqlInstance sql2017, sql2016, sql2012\nDisables mixed mode on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsMixedMode -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if you ran the command",
    "Description": "Disables mixed mode authentication",
    "CommandName": "Disable-DbsMixedMode",
    "Synopsis": "Disables mixed mode authentication",
    "Alias": "",
    "Tags": [
      "V-79121",
      "V-79355"
    ],
    "Syntax": "Disable-DbsMixedMode [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsMixedMode",
    "Params": [
      [
        "SqlInstance",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsOleAutomation -SqlInstance sql2017, sql2016, sql2012\nDisables OLE automation procedures on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsOleAutomation -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Description": "Disables non-compliant OLE automation procedures settings",
    "CommandName": "Disable-DbsOleAutomation",
    "Synopsis": "Disables non-compliant OLE automation procedures settings",
    "Alias": "",
    "Tags": "V-79333",
    "Syntax": "Disable-DbsOleAutomation [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsOleAutomation",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsPolybaseExport -SqlInstance sql2017, sql2016, sql2012\nDisables Polybase export on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsPolybaseExport -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Description": "Disables non-compliant Polybase export settings",
    "CommandName": "Disable-DbsPolybaseExport",
    "Synopsis": "Disables non-compliant Polybase export settings",
    "Alias": "",
    "Tags": "V-79343",
    "Syntax": "Disable-DbsPolybaseExport [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsPolybaseExport",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsProtocol -ComputerName sql01\nDisables all protocols except for tcp for all instances on sql01\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsProtocol -ComputerName sql01 -Whatif\nShows what protocols on what instance would be disabled if the command would run",
    "Description": "Disables all non-tcp protocols for all instances on a computer, enables TCP\n\nSettings go into effect after the SQL Service has been restarted",
    "CommandName": "Disable-DbsProtocol",
    "Synopsis": "Disables all non-tcp protocols for all instances on a computer, enables TCP",
    "Alias": "",
    "Tags": [
      "V-79185",
      "V-79241"
    ],
    "Syntax": "Disable-DbsProtocol [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsProtocol",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "cn,host,Server",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsRemoteAccess -SqlInstance sql2017, sql2016, sql2012\nDisables Remote Access on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsRemoteAccess -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Description": "Disables non-compliant Remote Access settings",
    "CommandName": "Disable-DbsRemoteAccess",
    "Synopsis": "Disables non-compliant Remote Access settings",
    "Alias": "",
    "Tags": [
      "V-79337",
      "NonCompliantResults"
    ],
    "Syntax": "Disable-DbsRemoteAccess [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsRemoteAccess",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsRemoteDataArchive -SqlInstance sql2017, sql2016, sql2012\nDisables Remote Data Archive on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsRemoteDataArchive -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Description": "Disables non-compliant Remote Data Archive settings",
    "CommandName": "Disable-DbsRemoteDataArchive",
    "Synopsis": "Disables non-compliant Remote Data Archive settings",
    "Alias": "",
    "Tags": [
      "V-79345",
      "NonCompliantResults"
    ],
    "Syntax": "Disable-DbsRemoteDataArchive [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsRemoteDataArchive",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsReplicationXp -SqlInstance sql2017, sql2016, sql2012\nDisables replication XPs on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsReplicationXp -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Description": "Disables replication XPs",
    "CommandName": "Disable-DbsReplicationXp",
    "Synopsis": "Disables replication XPs",
    "Alias": "",
    "Tags": "V-79351",
    "Syntax": "Disable-DbsReplicationXp [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsReplicationXp",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsSaAccount -SqlInstance Sql2016 -NewName newsa\nDisables and renames sa account",
    "Description": "Disable and/or rename sa account",
    "CommandName": "Disable-DbsSaAccount",
    "Synopsis": "Disable and/or rename sa account",
    "Alias": "",
    "Tags": [
      "V-79319",
      "V-79317"
    ],
    "Syntax": "Disable-DbsSaAccount [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-NewName] <String>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsSaAccount",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "NewName",
        "NewName for sa account",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsSqlClr -SqlInstance sql2017, sql2016, sql2012\nDisables CLR on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsSqlClr -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Description": "Disables SQL Server CLR Integration",
    "CommandName": "Disable-DbsSqlClr",
    "Synopsis": "Disables SQL Server CLR Integration",
    "Alias": "",
    "Tags": [
      "V-79179",
      "V-79243"
    ],
    "Syntax": "Disable-DbsSqlClr [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsSqlClr",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsUserOptions -SqlInstance sql2017, sql2016, sql2012\nDisables User Options on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsUserOptions -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Description": "Disables non-compliant User Options settings",
    "CommandName": "Disable-DbsUserOptions",
    "Synopsis": "Disables non-compliant User Options settings",
    "Alias": "",
    "Tags": "V-79335",
    "Syntax": "Disable-DbsUserOptions [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsUserOptions",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsXPCmdShell -SqlInstance sql2017, sql2016, sql2012\nDisables xp_cmdshell on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsXPCmdShell -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Description": "Disables xp_cmdshell",
    "CommandName": "Disable-DbsXPCmdShell",
    "Synopsis": "Disables xp_cmdshell",
    "Alias": "",
    "Tags": "V-79177",
    "Syntax": "Disable-DbsXPCmdShell [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Disable-DbsXPCmdShell",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Enable-DbsC2 -SqlInstance sql2017, sql2016, sql2012\nEnables Common Criteria Compliance Criteria Compliance on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Enable-DbsC2 -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Description": "Enables Common Criteria Compliance Criteria Compliance",
    "CommandName": "Enable-DbsC2",
    "Synopsis": "Enables Common Criteria Compliance Criteria Compliance",
    "Alias": "",
    "Tags": "V-79211",
    "Syntax": "Enable-DbsC2 [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Enable-DbsC2",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Enable-DbsFips -ComputerName sql2016, sql2017, sql2012\nEnables FIPS on sql2016, sql2017 and sql2012",
    "Description": "Enables FIPS",
    "CommandName": "Enable-DbsFips",
    "Synopsis": "Enables FIPS",
    "Alias": "",
    "Tags": [
      "V-67871",
      "V-79113",
      "V-79197",
      "V-79199",
      "V-79203",
      "V-79305",
      "V-79307",
      "V-79309"
    ],
    "Syntax": "Enable-DbsFips [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Enable-DbsFips",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAcl -SqlInstance sql2017, sql2016, sql2012\nGets permissions for the default data, log and backups on sql2017, sql2016, sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbaRegServer -SqlInstance sqlcentral | Get-DbsAcl\nGets the permissions for all SQL Servers stored in the sqlcentral registered server",
    "Description": "Gets the required permissions for SQL Server directories\n\nBy default, it will detect and secure the default Data, Log and Backup directories",
    "CommandName": "Get-DbsAcl",
    "Synopsis": "Gets the permissions required by DISA for SQL Server directories",
    "Alias": "",
    "Tags": [
      "V-79215",
      "V-79151",
      "V-79153",
      "V-79155",
      "V-79163"
    ],
    "Syntax": "Get-DbsAcl [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Credential] <PSCredential>] [[-Path] <String[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsAcl",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target _SQL Server_ instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "Credential",
        "Login to the target _Windows_ instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "Path",
        "By default, the ACLs on the paths to the data, log and backup files will be modified.\nIf you want to set permissions on a specific path, use this option.\nNote that if your Backup directory is a UNC share, it will be skipped.",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAdminRoleMember -SqlInstance sql2017, sql2016, sql2012\nGets members of the sysadmin and securityadmin server roles on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsAdminRoleMember -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\serverroles.csv -NoTypeInformation\nGets members of the sysadmin and securityadmin server roles and exports them to D:\\DISA\\serverroles.csv",
    "Description": "Gets members of the sysadmin and securityadmin server roles",
    "CommandName": "Get-DbsAdminRoleMember",
    "Synopsis": "Gets members of the sysadmin and securityadmin server roles",
    "Alias": "",
    "Tags": [
      "V-79217",
      "V-79219",
      "V-79235"
    ],
    "Syntax": "Get-DbsAdminRoleMember [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsAdminRoleMember",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAlert -SqlInstance sql2017, sql2016, sql2012\nChecks to ensure both Agent Alerts and Database Mail to ensure SQL Server provides immediate, real-time alerts to appropriate support staff",
    "Description": "Checks both Agent Alerts and Database Mail to ensure SQL Server provides immediate, real-time alerts to appropriate support staff",
    "CommandName": "Get-DbsAlert",
    "Synopsis": "Checks both Agent Alerts and Database Mail to ensure SQL Server provides immediate, real-time alerts to appropriate support staff",
    "Alias": "",
    "Tags": [
      "V-79231",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsAlert [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsAlert",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditDisabled -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit states on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsAuditDisabled -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit states on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsAuditDisabled -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\auditstates.csv -NoTypeInformation\nGets a list of non-compliant audit states sql2017, sql2016 and sql2012 to D:\\disa\\auditstates.csv",
    "Description": "Gets a list of non-compliant audit states",
    "CommandName": "Get-DbsAuditDisabled",
    "Synopsis": "Gets a list of non-compliant audit states",
    "Alias": "",
    "Tags": [
      "V-79133",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsAuditDisabled [-SqlInstance] <DbaInstanceParameter[]> [[-Audit] <String[]>] [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsAuditDisabled",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Audit",
        "The name of the DISA Audit",
        "",
        false,
        "false",
        "(Get-PSFConfigValue -FullName dbadisa.app.auditname)"
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditFilter -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit filters on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsAuditFilter -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit filters on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsAuditFilter -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\auditfilters.csv -NoTypeInformation\nGets a list of non-compliant audit filters sql2017, sql2016 and sql2012 to D:\\disa\\auditfilters.csv",
    "Description": "Gets a list of non-compliant audit filters",
    "CommandName": "Get-DbsAuditFilter",
    "Synopsis": "Gets a list of non-compliant audit filters",
    "Alias": "",
    "Tags": [
      "V-79303",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsAuditFilter [-SqlInstance] <DbaInstanceParameter[]> [[-Audit] <String[]>] [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsAuditFilter",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Audit",
        "The name of the DISA Audit",
        "",
        false,
        "false",
        "(Get-PSFConfigValue -FullName dbadisa.app.auditname)"
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditLogin -SqlInstance sql2017, sql2016, sql2012\nReturns a list of non-compliant servers that are not auditing logins either by Audits or via \"Both failed and successful logins\"",
    "Description": "Returns a list of non-compliant servers that are not auditing logins either by Audits or via \"Both failed and successful logins\"",
    "CommandName": "Get-DbsAuditLogin",
    "Synopsis": "Returns a list of non-compliant servers that are not auditing logins either by Audits or via \"Both failed and successful logins\"",
    "Alias": "",
    "Tags": [
      "V-79297",
      "V-79287",
      "V-79289",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsAuditLogin [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsAuditLogin",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditMaintainer -SqlInstance sql2017, sql2016, sql2012\nReturns a list of audit maintainers for sql2017, sql2016 and sql2012",
    "Description": "Returns a list of the server roles and individual logins that have permissions which enable the ability to create and maintain audit definitions.",
    "CommandName": "Get-DbsAuditMaintainer",
    "Synopsis": "Returns a list of the server roles and individual logins that have permissions which enable the ability to create and maintain audit definitions.",
    "Alias": "",
    "Tags": [
      "V-79135",
      "V-79143",
      "V-79159",
      "V-79161"
    ],
    "Syntax": "Get-DbsAuditMaintainer [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsAuditMaintainer",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditMaxValue -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant max values (rollover and file size) for sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsAuditMaxValue -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\maxvalues.csv -NoTypeInformation\nExports a list of non-compliant max values (rollover and file size) on sql2017, sql2016 and sql2012 to D:\\disa\\maxvalues.csv",
    "Description": "Gets a list of non-compliant max values (rollover and file size)",
    "CommandName": "Get-DbsAuditMaxValue",
    "Synopsis": "Gets a list of non-compliant max values (rollover and file size)",
    "Alias": "",
    "Tags": [
      "V-79149",
      "V-79227",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsAuditMaxValue [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Audit] <String[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsAuditMaxValue",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "Audit",
        "The name of the DISA Audit.",
        "",
        false,
        "false",
        "(Get-PSFConfigValue -FullName dbadisa.app.auditname)"
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditOnFailure -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit onfailure actions for sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsAuditOnFailure -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\auditonfailure.csv -NoTypeInformation\nExports a list of instance permissions for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\auditonfailure.csv",
    "Description": "Gets a list of non-compliant audit onfailure actions",
    "CommandName": "Get-DbsAuditOnFailure",
    "Synopsis": "Gets a list of non-compliant audit onfailure actions",
    "Alias": "",
    "Tags": [
      "V-79147",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsAuditOnFailure [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Audit] <String[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsAuditOnFailure",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "Audit",
        "The name of the DISA Audit",
        "",
        false,
        "false",
        "(Get-PSFConfigValue -FullName dbadisa.app.auditname)"
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditSchemaAccessGroup -SqlInstance sql2017, sql2016, sql2012\nGets a list of audits that record when privileges/permissions are retrieved or are failed to be retrieved for sql2017, sql2016 and sql2012",
    "Description": "Gets a list of audits that record when privileges/permissions are retrieved or are failed to be retrieved",
    "CommandName": "Get-DbsAuditSchemaAccessGroup",
    "Synopsis": "Gets a list of audits that record when privileges/permissions are retrieved or are failed to be retrieved",
    "Alias": "",
    "Tags": [
      "V-79137",
      "V-79139",
      "V-79301",
      "V-79299",
      "V-79251",
      "V-79253",
      "V-79255",
      "V-79257",
      "V-79267",
      "V-79269",
      "V-79271",
      "V-79273",
      "V-79279",
      "V-79281",
      "V-79283",
      "V-79285",
      "V-79301"
    ],
    "Syntax": "Get-DbsAuditSchemaAccessGroup [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsAuditSchemaAccessGroup",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditSpecification -SqlInstance sql2017, sql2016, sql2012\nReturns a list of missing audit specifications for sql2017, sql2016 and sql2012",
    "Description": "Returns a list of missing audit specifications",
    "CommandName": "Get-DbsAuditSpecification",
    "Synopsis": "Returns a list of missing audit specifications",
    "Alias": "",
    "Tags": [
      "V-79239",
      "V-79259",
      "V-79261",
      "V-79263",
      "V-79265",
      "V-79275",
      "V-79277",
      "V-79291",
      "V-79293",
      "V-79295"
    ],
    "Syntax": "Get-DbsAuditSpecification [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsAuditSpecification",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditStartupState -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit states on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsAuditStartupState -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit states on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsAuditStartupState -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\auditstartup.csv -NoTypeInformation\nGets a list of non-compliant audit startup states sql2017, sql2016 and sql2012 to D:\\disa\\auditstartup.csv",
    "Description": "Gets a list of non-compliant audit startup states",
    "CommandName": "Get-DbsAuditStartupState",
    "Synopsis": "Gets a list of non-compliant audit startup states",
    "Alias": "",
    "Tags": [
      "V-79141",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsAuditStartupState [-SqlInstance] <DbaInstanceParameter[]> [[-Audit] <String[]>] [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsAuditStartupState",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Audit",
        "The name of the DISA Audit.",
        "",
        false,
        "false",
        "(Get-PSFConfigValue -FullName dbadisa.app.auditname)"
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsBrowser -ComputerName Sql2016\nGets non-compliant SQL Browser services",
    "Description": "Gets non-compliant SQL Browser service states (Running)",
    "CommandName": "Get-DbsBrowser",
    "Synopsis": "Gets non-compliant SQL Browser service states (Running)",
    "Alias": "",
    "Tags": [
      "V-79353",
      "V-79349",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsBrowser [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsBrowser",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsC2Disabled -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Common Criteria Compliance settings from sql2017, sql2016 and sql2012",
    "Description": "Gets non-compliant Common Criteria Compliance settings",
    "CommandName": "Get-DbsC2",
    "Synopsis": "Gets non-compliant Common Criteria Compliance settings",
    "Alias": "",
    "Tags": [
      "V-79211",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsC2 [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsC2",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsCEIP -ComputerName sql2016, sql2017, sql2012\nReturns a list of accounts that have isntalled or modified SQL Server on sql2016, sql2017 and sql2012",
    "Description": "Returns a list of accounts that have installed or modified SQL Server",
    "CommandName": "Get-DbsCEIP",
    "Synopsis": "Returns a list of accounts that have installed or modified SQL Server",
    "Alias": "",
    "Tags": [
      "V-79313",
      "V-79315"
    ],
    "Syntax": "Get-DbsCEIP [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsCEIP",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsComputerLogin -SqlInstance sql2017, sql2016, sql2012\nReturns a list of all server logins that are computers for sql2017, sql2016, and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsComputerLogin -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\computeruser.csv -NoTypeInformation\nExports a list of all server logins that are computers to D:\\disa\\computeruser.csv",
    "Description": "Returns a list of all server logins that are computers",
    "CommandName": "Get-DbsComputerLogin",
    "Synopsis": "Returns a list of all server logins that are computers",
    "Alias": "",
    "Tags": "V-79131",
    "Syntax": "Get-DbsComputerLogin [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsComputerLogin",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsCustomXp -SqlInstance sql2017, sql2016, sql2012\nReturns a list non-standard extended procedures for sql2017, sql2016 and sql2012",
    "Description": "Returns a list non-standard extended procedures",
    "CommandName": "Get-DbsCustomXp",
    "Synopsis": "Returns a list non-standard extended procedures",
    "Alias": "",
    "Tags": "V-79181",
    "Syntax": "Get-DbsCustomXp [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsCustomXp",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbAccessControl -SqlInstance sql2017, sql2016, sql2012\nGathers information for for object ownership and authorization delegation for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbAccessControl -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\access.csv -NoTypeInformation\nExports information for for object ownership and authorization delegation for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\access.csv",
    "Description": "Gathers information for for object ownership and authorization delegation to be documented",
    "CommandName": "Get-DbsDbAccessControl",
    "Synopsis": "Gathers information for for object ownership and authorization delegation to be documented",
    "Alias": "",
    "Tags": [
      "V-79105",
      "V-79235"
    ],
    "Syntax": "Get-DbsDbAccessControl [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbAccessControl",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbAlterPermission -SqlInstance sql2017, sql2016, sql2012\nGets non-compliant alter permissions on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbAlterPermission -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\alter.csv -NoTypeInformation\nExports all non-compliant alter permissions for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\alter.csv",
    "Description": "Gets non-compliant alter permissions",
    "CommandName": "Get-DbsDbAlterPermission",
    "Synopsis": "Gets non-compliant alter permissions",
    "Alias": "",
    "Tags": [
      "V-79109",
      "V-79075",
      "V-79081",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsDbAlterPermission [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbAlterPermission",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbAuditMaintainer -SqlInstance sql2017, sql2016, sql2012\nReturns a list of audit maintainers for sql2017, sql2016 and sql2012",
    "Description": "Returns a list of the database roles and individual users that have permissions which enable the ability to create and maintain audit definitions",
    "CommandName": "Get-DbsDbAuditMaintainer",
    "Synopsis": "Returns a list of the database roles and individual users that have permissions which enable the ability to create and maintain audit definitions",
    "Alias": "",
    "Tags": "V-79073",
    "Syntax": "Get-DbsDbAuditMaintainer [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbAuditMaintainer",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbComputerUser -SqlInstance sql2017, sql2016, sql2012\nReturns a list of all database user accounts that are computers for sql2017, sql2016, and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbComputerUser -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\computeruser.csv -NoTypeInformation\nExports a list of all database user accounts that are computers to D:\\disa\\computeruser.csv",
    "Description": "Returns a list of all database user accounts that are computers",
    "CommandName": "Get-DbsDbComputerUser",
    "Synopsis": "Returns a list of all database user accounts that are computers",
    "Alias": "",
    "Tags": "V-79067",
    "Syntax": "Get-DbsDbComputerUser [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbComputerUser",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbContainedUser -SqlInstance sql2017, sql2016, sql2012\nReturns a list of non-compliant users for all contained databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbContainedUser -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\contained.csv -NoTypeInformation\nExports a list of non-compliant users for all contained databases on sql2017, sql2016 and sql2012 to D:\\disa\\contained.csv",
    "Description": "Returns a list of non-compliant users for all contained databases",
    "CommandName": "Get-DbsDbContainedUser",
    "Synopsis": "Returns a list of non-compliant users for all contained databases",
    "Alias": "",
    "Tags": [
      "V-79193",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsDbContainedUser [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbContainedUser",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbExecuteAs -SqlInstance sql2017, sql2016, sql2012\nGets a list of stored procedures and functions that utilize impersonation (EXECUTE AS) for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbExecuteAs -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\contained.csv -NoTypeInformation\nExports a list of stored procedures and functions that utilize impersonation for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\contained.csv",
    "Description": "Gets a list of stored procedures and functions that utilize impersonation (EXECUTE AS)",
    "CommandName": "Get-DbsDbExecuteAs",
    "Synopsis": "Gets a list of stored procedures and functions that utilize impersonation (EXECUTE AS)",
    "Alias": "",
    "Tags": "V-79107",
    "Syntax": "Get-DbsDbExecuteAs [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbExecuteAs",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbExternalProcessAccess -SqlInstance sql2017, sql2016, sql2012\nReturns a listing of accounts currently configured for use by external processes for sql2017, sql2016 and sql2012",
    "Description": "Returns a listing of accounts currently configured for use by external processes",
    "CommandName": "Get-DbsDbExternalProcessAccess",
    "Synopsis": "Returns a listing of accounts currently configured for use by external processes",
    "Alias": "",
    "Tags": "V-79221",
    "Syntax": "Get-DbsDbExternalProcessAccess [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbExternalProcessAccess",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbInputValidity -SqlInstance sql2017, sql2016, sql2012\nReturns a list of all input validations\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbInputValidity -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\checks.csv -NoTypeInformation\nExports input validation for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\checks.csv",
    "Description": "Returns a list of all input validations",
    "CommandName": "Get-DbsDbInputValidity",
    "Synopsis": "Returns a list of all input validations",
    "Alias": "",
    "Tags": "V-79095",
    "Syntax": "Get-DbsDbInputValidity [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbInputValidity",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbKeyEncryptedByPassword -SqlInstance sql2017, sql2016, sql2012\nReturns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbKeyEncryptedByPassword -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\access.csv -NoTypeInformation\nReturns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\access.csv",
    "Description": "Returns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key",
    "CommandName": "Get-DbsDbKeyEncryptedByPassword",
    "Synopsis": "Returns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key",
    "Alias": "",
    "Tags": [
      "V-79085",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsDbKeyEncryptedByPassword [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbKeyEncryptedByPassword",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbKeyNotEncryptedByServer -SqlInstance sql2017, sql2016, sql2012\nReturns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbKeyNotEncryptedByServer -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\access.csv -NoTypeInformation\nReturns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\access.csv",
    "Description": "Returns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key",
    "CommandName": "Get-DbsDbKeyNotEncryptedByServer",
    "Synopsis": "Returns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key",
    "Alias": "",
    "Tags": [
      "V-79087",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsDbKeyNotEncryptedByServer [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbKeyNotEncryptedByServer",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbModuleAccess -SqlInstance sql2017, sql2016, sql2012\nGets a listing of users and roles who are currently capable of changing stored procedures, functions, and triggers for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbModuleAccess -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\modulechanger.csv -NoTypeInformation\nExports a listing of users and roles who are currently capable of changing stored procedures, functions, and triggers for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\modulechanger.csv",
    "Description": "Obtains a listing of users and roles who are currently capable of changing stored procedures, functions, and triggers",
    "CommandName": "Get-DbsDbModuleAccess",
    "Synopsis": "Obtains a listing of users and roles who are currently capable of changing stored procedures, functions, and triggers",
    "Alias": "",
    "Tags": "V-79075",
    "Syntax": "Get-DbsDbModuleAccess [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbModuleAccess",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbObjectOwner -SqlInstance sql2017, sql2016, sql2012\nGets SQL Server accounts that own database objects for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbObjectOwner -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\dbobjowners.csv -NoTypeInformation\nGets SQL Server accounts that own database objects for sql2017, sql2016 and sql2012 to D:\\disa\\dbobjowners.csv",
    "Description": "Returns SQL Server accounts that own database objects. These users are presumed to be authorized.",
    "CommandName": "Get-DbsDbObjectOwner",
    "Synopsis": "Returns SQL Server accounts that own database objects. These users are presumed to be authorized.",
    "Alias": "",
    "Tags": "V-79079",
    "Syntax": "Get-DbsDbObjectOwner [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbObjectOwner",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbOwnerFixedServerRole -SqlInstance sql2017, sql2016, sql2012\nGets a listing of user databases whose owner is a member of a fixed server role for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbOwnerFixedServerRole -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\fixedserverrole.csv -NoTypeInformation\nExports a list of user databases whose owner is a member of a fixed server role for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\fixedserverrole.csv",
    "Description": "Gets a listing of user databases whose owner is a member of a fixed server role",
    "CommandName": "Get-DbsDbOwnerFixedServerRole",
    "Synopsis": "Gets a listing of user databases whose owner is a member of a fixed server role",
    "Alias": "",
    "Tags": "V-79111",
    "Syntax": "Get-DbsDbOwnerFixedServerRole [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbOwnerFixedServerRole",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of database permissions for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of database permissions for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsDbPermission -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\dbperms.csv -NoTypeInformation\nExports a list of database permissions for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\dbperms.csv",
    "Description": "Gets a list of database permissions using the 'Database permission assignments to users and roles.sql' file provided by DISA",
    "CommandName": "Get-DbsDbPermission",
    "Synopsis": "Gets a list of database permissions using the 'Database permission assignments to users and roles.sql' file provided by DISA",
    "Alias": "",
    "Tags": [
      "V-79125",
      "V-79065"
    ],
    "Syntax": "Get-DbsDbPermission [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbPermission",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbProhibitedKeyAlgorithm -SqlInstance sql2017\nGets a list of prohibited key algorithms for all databases on sql2017, sql2016 and sql2012",
    "Description": "Gets a list of prohibited key algorithms",
    "CommandName": "Get-DbsDbProhibitedKeyAlgorithm",
    "Synopsis": "Gets a list of prohibited key algorithms",
    "Alias": "",
    "Tags": [
      "V-79113",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsDbProhibitedKeyAlgorithm [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbProhibitedKeyAlgorithm",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbRecoveryModel -SqlInstance sql2017, sql2016, sql2012\nReturns a list of all non-compliant (non-full) database recovery models.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbRecoveryModel -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\recovery.csv -NoTypeInformation\nExports all non-compliant (non-full) database recovery models for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\recovery.csv",
    "Description": "Returns a list of all non-compliant (non-full) database recovery models",
    "CommandName": "Get-DbsDbRecoveryModel",
    "Synopsis": "Returns a list of all non-compliant (non-full) database recovery models",
    "Alias": "",
    "Tags": [
      "V-79083",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsDbRecoveryModel [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbRecoveryModel",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbSchemaOwner -SqlInstance sql2017, sql2016, sql2012\nReturns a list of all schema owners\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbSchemaOwner -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\schemaowners.csv -NoTypeInformation\nExports a list of all schema owners for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\schemaowners.csv",
    "Description": "Returns a list of all schema owners",
    "CommandName": "Get-DbsDbSchemaOwner",
    "Synopsis": "Returns a list of all schema owners",
    "Alias": "",
    "Tags": "V-79077",
    "Syntax": "Get-DbsDbSchemaOwner [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbSchemaOwner",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbTde -SqlInstance sql2017, sql2016, sql2012\nReturns a list of non-compliant (unencrypted) databases for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbTde -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\access.csv -NoTypeInformation\nReturns a list of non-compliant (unencrypted) databases for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\access.csv",
    "Description": "Returns a list of non-compliant (unencrypted) databases",
    "CommandName": "Get-DbsDbTde",
    "Synopsis": "Returns a list of non-compliant (unencrypted) databases",
    "Alias": "",
    "Tags": [
      "V-79115",
      "V-79117",
      "V-79205",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsDbTde [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbTde",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbTemporalTable -SqlInstance sql2017, sql2016, sql2012\nGets all of the temporal tables in all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbTemporalTable -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\temporal.csv -NoTypeInformation\nGets all of the temporal tables in all databases on sql2017, sql2016 and sql2012 to D:\\disa\\temporal.csv",
    "Description": "Gets all of the temporal tables in the database",
    "CommandName": "Get-DbsDbTemporalTable",
    "Synopsis": "Gets all of the temporal tables in the database",
    "Alias": "",
    "Tags": "V-79069",
    "Syntax": "Get-DbsDbTemporalTable [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbTemporalTable",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbTrustworthy -SqlInstance sql2017, sql2016, sql2012\nReturns a list of all trustworthy databases.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbTrustworthy -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\trustworthy.csv -NoTypeInformation\nExports all trustworthy databases for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\trustworthy.csv",
    "Description": "Returns a list trustworthy databases",
    "CommandName": "Get-DbsDbTrustworthy",
    "Synopsis": "Returns a list trustworthy databases",
    "Alias": "",
    "Tags": "V-79071",
    "Syntax": "Get-DbsDbTrustworthy [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbTrustworthy",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbUser -SqlInstance sql2017, sql2016, sql2012\nReturns a list of all users for a database. These users are presumed to be authorized.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbUser -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\authorized.csv -NoTypeInformation\nExports authorized users for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\authorized.csv",
    "Description": "Returns a list of all users for a database. These users are presumed to be authorized.",
    "CommandName": "Get-DbsDbUser",
    "Synopsis": "Returns a list of all users for a database. These users are presumed to be authorized.",
    "Alias": "",
    "Tags": "",
    "Syntax": "Get-DbsDbUser [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsDbUser",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsEndpointEncryption -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant endpoint encryption algorithms on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsEndpointEncryption -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\startupproc.csv -NoTypeInformation\nGets a list of non-compliant endpoint encryption algorithms on sql2017, sql2016 and sql2012 to D:\\disa\\startupproc.csv",
    "Description": "Gets a list of non-compliant endpoint encryption algorithms",
    "CommandName": "Get-DbsEndpointEncryption",
    "Synopsis": "Gets a list of non-compliant endpoint encryption algorithms",
    "Alias": "",
    "Tags": [
      "V-79323",
      "V-79325",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsEndpointEncryption [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsEndpointEncryption",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsExternalScripts -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant External Scripts Enabled settings from sql2017, sql2016 and sql2012",
    "Description": "Gets non-compliant External Scripts Enabled settings",
    "CommandName": "Get-DbsExternalScripts",
    "Synopsis": "Gets non-compliant External Scripts Enabled settings",
    "Alias": "",
    "Tags": [
      "V-79347",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsExternalScripts [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsExternalScripts",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsFeature -ComputerName sql2016, sql2017, sql2012\nGets all instances that do not have an SPN from sql2016, sql2017 and sql2012",
    "Description": "Returns a list of all features that may be not required and must be documented",
    "CommandName": "Get-DbsFeature",
    "Synopsis": "Returns a list of all features that may be not required and must be documented",
    "Alias": "",
    "Tags": [
      "V-79173",
      "V-79175",
      "V-79247"
    ],
    "Syntax": "Get-DbsFeature [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsFeature",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials.",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsFilestreamAccess -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Filestream Access settings from sql2017, sql2016 and sql2012",
    "Description": "Gets non-compliant Filestream Access settings",
    "CommandName": "Get-DbsFilestreamAccess",
    "Synopsis": "Gets non-compliant Filestream Access settings",
    "Alias": "",
    "Tags": [
      "V-79329",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsFilestreamAccess [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsFilestreamAccess",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsFips -ComputerName sql2016, sql2017, sql2012\nGets FIPS disabled state from sql2016, sql2017 and sql2012",
    "Description": "Returns a list of computers that are not FIPS compliant",
    "CommandName": "Get-DbsFips",
    "Synopsis": "Returns a list of computers that are not FIPS compliant",
    "Alias": "",
    "Tags": [
      "V-67871",
      "V-79113",
      "V-79197",
      "V-79199",
      "V-79203",
      "V-79305",
      "V-79307",
      "V-79309",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsFips [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsFips",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials.",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsHadoopConnectivity -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Hadoop Connectivity settings from sql2017, sql2016 and sql2012",
    "Description": "Gets non-compliant Hadoop Connectivity settings",
    "CommandName": "Get-DbsHadoopConnectivity",
    "Synopsis": "Gets non-compliant Hadoop Connectivity settings",
    "Alias": "",
    "Tags": [
      "V-79341",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsHadoopConnectivity [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsHadoopConnectivity",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsIFI -ComputerName sql01\nGets all non-compliant Instant File Initialization (IFI) settings from all instances on sql01",
    "Description": "Gets all non-compliant Instant File Initialization (IFI) settings from all instances on a computer",
    "CommandName": "Get-DbsIFI",
    "Synopsis": "Gets all non-compliant Instant File Initialization (IFI) settings from all instances on a computer",
    "Alias": "",
    "Tags": [
      "V-79213",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsIFI [[-ComputerName] <DbaInstanceParameter[]>] [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsIFI",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsLinkedServer -SqlInstance sql2017, sql2016, sql2012\nGets a list of linked servers and their logins for sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsLinkedServer -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\linkedservers.csv -NoTypeInformation\nGets a list of linked servers and their logins for sql2017, sql2016 and sql2012 and exports them to D:\\DISA\\linkedservers.csv",
    "Description": "Gets a list of linked servers and their logins",
    "CommandName": "Get-DbsLinkedServer",
    "Synopsis": "Gets a list of linked servers and their logins",
    "Alias": "",
    "Tags": "V-79183",
    "Syntax": "Get-DbsLinkedServer [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsLinkedServer",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsLocalAdmin -ComputerName sql01\nGets a list of Windows administrators on a SQL Server",
    "Description": "Gets a list of Windows administrators on a SQL Server",
    "CommandName": "Get-DbsLocalAdmin",
    "Synopsis": "Gets a list of Windows administrators on a SQL Server",
    "Alias": "",
    "Tags": "V-79237",
    "Syntax": "Get-DbsLocalAdmin [[-ComputerName] <DbaInstanceParameter[]>] [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsLocalAdmin",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsLogin -SqlInstance sql2017, sql2016, sql2012\nGets a list of all logins from sql2017, sql2016 and sql2012",
    "Description": "Gets a list of all logins",
    "CommandName": "Get-DbsLogin",
    "Synopsis": "Gets a list of all logins",
    "Alias": "",
    "Tags": "V-79201",
    "Syntax": "Get-DbsLogin [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsLogin",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsLoginProperty -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant login properties from sql2017, sql2016 and sql2012",
    "Description": "Gets non-compliant login properties",
    "CommandName": "Get-DbsLoginProperty",
    "Synopsis": "Gets non-compliant login properties",
    "Alias": "",
    "Tags": [
      "V-79191",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsLoginProperty [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsLoginProperty",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsMixedMode -SqlInstance sql2017, sql2016, sql2012\nReturns a list of any server that has mixed mode enabled",
    "Description": "Returns a list of any server that has mixed mode enabled",
    "CommandName": "Get-DbsMixedMode",
    "Synopsis": "Returns a list of any server that has mixed mode enabled",
    "Alias": "",
    "Tags": [
      "V-79121",
      "V-79355"
    ],
    "Syntax": "Get-DbsMixedMode [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsMixedMode",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsOleAutomation -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Ole Automation Procedures settings from sql2017, sql2016 and sql2012",
    "Description": "Gets non-compliant Ole Automation Procedures settings.",
    "CommandName": "Get-DbsOleAutomation",
    "Synopsis": "Gets non-compliant Ole Automation Procedures settings.",
    "Alias": "",
    "Tags": [
      "V-79333",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsOleAutomation [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsOleAutomation",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of instance permissions for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of instance permissions for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsPermission -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\instanceperms.csv -NoTypeInformation\nExports a list of instance permissions for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\instanceperms.csv",
    "Description": "Gets a list of instance permissions using the 'Instance permissions assignments to logins and roles.sql' file provided by DISA",
    "CommandName": "Get-DbsPermission",
    "Synopsis": "Gets a list of instance permissions using the 'Instance permissions assignments to logins and roles.sql' file provided by DISA",
    "Alias": "",
    "Tags": "V-79125",
    "Syntax": "Get-DbsPermission [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsPermission",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsPolybaseExport -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Allow Polybase Export settings from sql2017, sql2016 and sql2012",
    "Description": "Gets non-compliant Allow Polybase Export settings.",
    "CommandName": "Get-DbsPolybaseExport",
    "Synopsis": "Gets non-compliant Allow Polybase Export settings.",
    "Alias": "",
    "Tags": [
      "V-79343",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsPolybaseExport [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsPolybaseExport",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsPrivilegedLogin -SqlInstance sql2017, sql2016, sql2012\nReview server-level securables and built-in role membership to ensure only authorized users have privileged access and the ability to create server-level objects and grant permissions to themselves \r\nor others for sql2017, sql2016 and sql2012",
    "Description": "Review server-level securables and built-in role membership to ensure only authorized users have privileged access and the ability to create server-level objects and grant permissions to themselves or others",
    "CommandName": "Get-DbsPrivilegedLogin",
    "Synopsis": "Review server-level securables and built-in role membership to ensure only authorized users have privileged access and the ability to create server-level objects and grant permissions to themselves or others",
    "Alias": "",
    "Tags": "V-79219",
    "Syntax": "Get-DbsPrivilegedLogin [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsPrivilegedLogin",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsProtocol -ComputerName sql01\nGets all non-compliant protocols enabled from all instances on sql01",
    "Description": "Gets all non-compliant protocols enabled from all instances on a computer",
    "CommandName": "Get-DbsProtocol",
    "Synopsis": "Gets all non-compliant protocols enabled from all instances on a computer",
    "Alias": "",
    "Tags": [
      "V-79185",
      "V-79241",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsProtocol [[-ComputerName] <DbaInstanceParameter[]>] [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsProtocol",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsRemoteAccess -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Remote Access settings from sql2017, sql2016 and sql2012",
    "Description": "Gets non-compliant Remote Access settings",
    "CommandName": "Get-DbsRemoteAccess",
    "Synopsis": "Gets non-compliant Remote Access settings",
    "Alias": "",
    "Tags": [
      "V-79337",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsRemoteAccess [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsRemoteAccess",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsRemoteDataArchive -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Remote Data Archive settings from sql2017, sql2016 and sql2012",
    "Description": "Gets non-compliant Remote Data Archive settings",
    "CommandName": "Get-DbsRemoteDataArchive",
    "Synopsis": "Gets non-compliant Remote Data Archive settings",
    "Alias": "",
    "Tags": [
      "V-79345",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsRemoteDataArchive [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsRemoteDataArchive",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsReplicationXp -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Replication Xp settings from sql2017, sql2016 and sql2012",
    "Description": "Gets non-compliant Replication Xp settings.",
    "CommandName": "Get-DbsReplicationXp",
    "Synopsis": "Gets non-compliant Replication Xp settings.",
    "Alias": "",
    "Tags": [
      "V-79351",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsReplicationXp [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsReplicationXp",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsSaAccount -SqlInstance sql2017, sql2016, sql2012\nGets a list of logins named 'sa' or 'sa' accounts that are still enabled from sql2017, sql2016, and sql2012",
    "Description": "Gets a list of non-compliant logins named 'sa' or 'sa' accounts that are still enabled",
    "CommandName": "Get-DbsSaAccount",
    "Synopsis": "Gets a list of non-compliant logins named 'sa' or 'sa' accounts that are still enabled",
    "Alias": "",
    "Tags": [
      "V-79319",
      "V-79317",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsSaAccount [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsSaAccount",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>GetDbsSampleDatabase -SqlInstance sql2017, sql2016, sql2012\nReturns a list of prohibited sample databases for sql2017, sql2016, and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>GetDbsSampleDatabase -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\sampledbs.csv -NoTypeInformation\nExports a list of prohibited sample databases for sql2017, sql2016 and sql2012 to D:\\disa\\sampledbs.csv",
    "Description": "Returns a list of prohibited (non-compliant) sample databases",
    "CommandName": "Get-DbsSampleDatabase",
    "Synopsis": "Returns a list of prohibited (non-compliant) sample databases",
    "Alias": "",
    "Tags": [
      "V-79195",
      "V-79171",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsSampleDatabase [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsSampleDatabase",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsServiceAccount -ComputerName sql01\nGets SQL services and service accounts",
    "Description": "Gets SQL services and service accounts",
    "CommandName": "Get-DbsServiceAccount",
    "Synopsis": "Gets SQL services and service accounts",
    "Alias": "",
    "Tags": "V-79245",
    "Syntax": "Get-DbsServiceAccount [[-ComputerName] <DbaInstanceParameter[]>] [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsServiceAccount",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsSetupAccount -ComputerName sql2016, sql2017, sql2012\nReturns a list of accounts that have isntalled or modified SQL Server on sql2016, sql2017 and sql2012",
    "Description": "Returns a list of accounts that have installed or modified SQL Server",
    "CommandName": "Get-DbsSetupAccount",
    "Synopsis": "Returns a list of accounts that have installed or modified SQL Server",
    "Alias": "",
    "Tags": "V-79167",
    "Syntax": "Get-DbsSetupAccount [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsSetupAccount",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials.",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsSqlClr -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant CLR settings from sql2017, sql2016 and sql2012",
    "Description": "Gets non-compliant CLR settings",
    "CommandName": "Get-DbsSqlClr",
    "Synopsis": "Gets non-compliant CLR settings",
    "Alias": "",
    "Tags": [
      "V-79179",
      "V-79243",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsSqlClr [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsSqlClr",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsStartupProcedure -SqlInstance sql2017, sql2016, sql2012\nGets a list of startup procedures for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsStartupProcedure -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\startupproc.csv -NoTypeInformation\nExports a list of startup procedures for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\startupproc.csv",
    "Description": "Gets a list of startup procedures",
    "CommandName": "Get-DbsStartupProcedure",
    "Synopsis": "Gets a list of startup procedures",
    "Alias": "",
    "Tags": "V-79321",
    "Syntax": "Get-DbsStartupProcedure [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsStartupProcedure",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS > Get-DbsStig\nReturn checklsits for database and instance for SQL Server 2014 and 2016\n-------------------------- EXAMPLE 2 --------------------------\nPS > Get-DbsStig -Version 2014\nReturn checklsits for database and instance for SQL Server 2014 only",
    "Description": "Parses the U_MS_SQL_Server_2014_Database_STIG_V1R6_Manual-xccdf style XML files from DISA into PowerShell objects",
    "CommandName": "Get-DbsStig",
    "Synopsis": "Parses the U_MS_SQL_Server_2014_Database_STIG_V1R6_Manual-xccdf style XML files from DISA into PowerShell objects",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Syntax": "Get-DbsStig [[-Path] <Object[]>] [[-Version] <Int32[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsStig",
    "Params": [
      [
        "Path",
        "The Path to the STIG xml file. Not required, as they've been included.",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "Version",
        "By default, SQL Server 2014 and above stigs are returned. This allows you to filter by version.",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsSystemPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit states on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsSystemPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit states on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsSystemPermission -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\auditstates.csv -NoTypeInformation\nGets a list of non-compliant audit states sql2017, sql2016 and sql2012 to D:\\disa\\auditstates.csv",
    "Description": "Gets permissions that were identified as not allowed in the check content",
    "CommandName": "Get-DbsSystemPermission",
    "Synopsis": "Gets permissions that were identified as not allowed in the check content",
    "Alias": "",
    "Tags": [
      "V-79129",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsSystemPermission [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsSystemPermission",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsTcpPort -ComputerName server01, server02\nReturns all Tcp Ports in use by SQL Server on server01 and server02",
    "Description": "Returns all Tcp Ports in use by SQL Server",
    "CommandName": "Get-DbsTcpPort",
    "Synopsis": "Returns all Tcp Ports in use by SQL Server",
    "Alias": "",
    "Tags": "V-79187",
    "Syntax": "Get-DbsTcpPort [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsTcpPort",
    "Params": [
      [
        "ComputerName",
        "The target server or instance.",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials.",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsTimeSource -ComputerName sql01\nReturns a list of non-compliant time sources",
    "Description": "Returns a list of non-compliant time sources",
    "CommandName": "Get-DbsTimeSource",
    "Synopsis": "Returns a list of non-compliant time sources",
    "Alias": "",
    "Tags": [
      "V-79233",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsTimeSource [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsTimeSource",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsTraceFlag -SqlInstance sql2017, sql2016, sql2012\nGets trace flag on servers.",
    "Description": "Checks to see if trace flag 3625 to hide system information form non-sysadmins in error messages",
    "CommandName": "Get-DbsTraceFlag",
    "Synopsis": "Checks both startup params and trace flags to see if trace flag 3625 is set",
    "Alias": "",
    "Tags": [
      "V-79097",
      "V-79217",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsTraceFlag [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsTraceFlag",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target _SQL Server_ instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "Credential",
        "Login to the target _Windows Server_ using alternative credentials. Accepts PowerShell credentials (Get-Credential).",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Tracy Boggiano (@TracyBoggiano), databasesuperhero.com",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsUserOptions -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant User Options settings from sql2017, sql2016 and sql2012",
    "Description": "Gets non-compliant User Options settings",
    "CommandName": "Get-DbsUserOptions",
    "Synopsis": "Gets non-compliant User Options settings",
    "Alias": "",
    "Tags": [
      "V-79335",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsUserOptions [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsUserOptions",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsXPCmdShell -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant xp_cmdshell settings from sql2017, sql2016 and sql2012",
    "Description": "Gets non-compliant xp_cmdshell settings",
    "CommandName": "Get-DbsXPCmdShell",
    "Synopsis": "Gets non-compliant xp_cmdshell settings",
    "Alias": "",
    "Tags": [
      "V-79177",
      "NonCompliantResults"
    ],
    "Syntax": "Get-DbsXPCmdShell [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsXPCmdShell",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsXpPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of registry extended stored procedure permissions for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsXpPermission -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\instanceperms.csv -NoTypeInformation\nExports a list of registry extended stored procedure permissions for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\instanceperms.csv",
    "Description": "Gets a list of registry extended stored procedure permissions",
    "CommandName": "Get-DbsXpPermission",
    "Synopsis": "Gets a list of registry extended stored procedure permissions",
    "Alias": "",
    "Tags": "V-79327",
    "Syntax": "Get-DbsXpPermission [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Get-DbsXpPermission",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>. Import-ModuleFile -File $function.FullName\nImports the file stored in $function according to import policy",
    "Description": "This helper function is used during module initialization.\nIt should always be dotsourced itself, in order to proper function.\n\nThis provides a central location to react to files being imported, if later desired",
    "CommandName": "Import-ModuleFile",
    "Synopsis": "Loads files into the module on module import.",
    "Alias": "",
    "Syntax": "Import-ModuleFile [[-Path] <String>] [<CommonParameters>]",
    "Name": "Import-ModuleFile",
    "Params": [
      [
        "Path",
        "The path to the file to load",
        "",
        false,
        "false",
        ""
      ]
    ],
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Install-DbsAudit -SqlInstance sql2017, sql2016, sql2012\nDetect version and create appropriate audit from DISA, output to DATA\\Stig\\, shutdown on failure\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Install-DbsAudit -SqlInstance sql2017 -SqlCredential sqladmin -Path C:\\temp -OnFaiure Continue\nLogin as sqladmin, detect version and create appropriate audit from DISA, output to C:\\temp, continue on failure\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbaRegServer -SqlInstance sqlcentral | Install-DbaDisaStigAudit\nInstalls disa stig on all servers on the CMS",
    "Description": "Installs the supplemental SQL Server Audit provided by DISA",
    "CommandName": "Install-DbsAudit",
    "Synopsis": "Installs the supplemental SQL Server Audit provided by DISA",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Syntax": "Install-DbsAudit [-SqlInstance] <DbaInstanceParameter[]> [-SqlCredential <PSCredential>] [-Name <String>] [-Path <String>] [-MaxSize <String>] [-MaxFiles <String>] [-Reserve <String>] [-QueueDelay <String>] [-OnFailure <String>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Install-DbsAudit",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "Name",
        "The name of the audit and audit specification. Defaults to DISA's default of DISA_STIG.",
        "",
        false,
        "false",
        "DISA_STIG"
      ],
      [
        "Path",
        "The path where the audit files will be created. Defaults to default data directory + STIG. Creates the directory if it does not exist.",
        "",
        false,
        "false",
        ""
      ],
      [
        "MaxSize",
        "The max size of each audit file. Defaults to 10MB.",
        "",
        false,
        "false",
        "10 MB"
      ],
      [
        "MaxFiles",
        "The max number of files to keep. Defaults to 50.",
        "",
        false,
        "false",
        "50"
      ],
      [
        "Reserve",
        "Sets the reserve of disk space. Defaults to OFF.",
        "",
        false,
        "false",
        "OFF"
      ],
      [
        "QueueDelay",
        "Sets the queue delay of the audit. Defaults to 1000.",
        "",
        false,
        "false",
        "1000"
      ],
      [
        "OnFailure",
        "Instructs SQL Server of what to do on failure. Defaults to SHUTDOWN. Options include 'FAIL_OPERATION', 'SHUTDOWN', 'CONTINUE'.",
        "",
        false,
        "false",
        "SHUTDOWN"
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "",
    "Description": "Runs wmi commands against a target system.\nEither directly or over PowerShell remoting.",
    "CommandName": "Invoke-ManagedComputerCommand",
    "Synopsis": "Runs wmi commands against a target system.",
    "Alias": "",
    "Syntax": "Invoke-ManagedComputerCommand [-ComputerName] <DbaInstanceParameter> [[-Credential] <PSCredential>] [-ScriptBlock] <ScriptBlock> [[-ArgumentList] <String[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Invoke-ManagedComputerCommand",
    "Params": [
      [
        "ComputerName",
        "The target to run against. Must be resolvable.",
        "Server",
        true,
        "false",
        ""
      ],
      [
        "Credential",
        "Credentials to use when using PowerShell remoting.",
        "",
        false,
        "false",
        ""
      ],
      [
        "ScriptBlock",
        "The scriptblock to execute.\r\nUse $wmi to access the smo wmi object.\r\nMust not include a param block!",
        "",
        true,
        "false",
        ""
      ],
      [
        "ArgumentList",
        "The arguments to pass to your scriptblock.\r\nAccess them within the scriptblock using the automatic variable $args",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "Left in for legacy reasons. This command will throw no matter what",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "",
    "Description": null,
    "CommandName": "Invoke-TlsWebRequest",
    "Synopsis": "\r\nInvoke-TlsWebRequest \r\n",
    "Alias": "",
    "Syntax": "syntaxItem\r\n----------\r\n{@{name=Invoke-TlsWebRequest; CommonParameters=False; parameter=System.Object[]}}",
    "Name": "Invoke-TlsWebRequest",
    "Params": [],
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "",
    "Description": null,
    "CommandName": "Join-AdminUnc",
    "Synopsis": "Internal function. Parses a path to make it an admin UNC.",
    "Alias": "",
    "Syntax": "Join-AdminUnc [-servername] <String> [-filepath] <String> [<CommonParameters>]",
    "Name": "Join-AdminUnc",
    "Params": [
      [
        "servername",
        "",
        "",
        true,
        "false",
        ""
      ],
      [
        "filepath",
        "",
        "",
        true,
        "false",
        ""
      ]
    ],
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Move-DbsAuditFile -SqlInstance sql2017\nMove it",
    "Description": "Moves .sqlaudit files to a central repository using UNC shares",
    "CommandName": "Move-DbsAuditFile",
    "Synopsis": "Moves .sqlaudit files to a central repository using UNC shares",
    "Alias": "",
    "Tags": [
      "V-79311",
      "V-79223",
      "V-79225"
    ],
    "Syntax": "Move-DbsAuditFile [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Path] <String[]>] [[-Destination] <String>] [-NoCompress] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Move-DbsAuditFile",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances\nThis is required to get specific information about the paths to modify. The base computer name is also used to\r\nperform the actual modifications",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "Path",
        "Pat dat",
        "",
        false,
        "false",
        ""
      ],
      [
        "Destination",
        "Central repo",
        "",
        false,
        "false",
        ""
      ],
      [
        "NoCompress",
        "Skip zip",
        "",
        false,
        "false",
        "False"
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS > New-DbsDocTemplate -FilePath C:\\temp\\sql2016.md\nCreates a DISA documentation template for 2016\n-------------------------- EXAMPLE 2 --------------------------\nPS > New-DbsDocTemplate -FilePath C:\\temp\\sql2014.md -Version 2014\nCreates a DISA documentation template for 2014",
    "Description": "Creates a documentation template in markdown that makes it easy to provide the necessary documentation to auditors",
    "CommandName": "New-DbsDocTemplate",
    "Synopsis": "Creates a documentation template in markdown that makes it easy to provide the necessary documentation to auditors",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Syntax": "New-DbsDocTemplate [-FilePath] <String> [[-Version] <Int32>] [[-Include] <String[]>] [-EnableException] [<CommonParameters>]",
    "Name": "New-DbsDocTemplate",
    "Params": [
      [
        "FilePath",
        "The output markdown file path",
        "",
        true,
        "false",
        ""
      ],
      [
        "Version",
        "The SQL Server version. 2016 by default.",
        "",
        false,
        "false",
        "2016"
      ],
      [
        "Include",
        "What parts to include in the output",
        "",
        false,
        "false",
        "@(\"Description\", \"FixText\", \"Check\")"
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Remove-DbsSystemPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit states on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Remove-DbsSystemPermission -SqlInstance sql2017, sql2016 and sql2012\nRemoves all non-compliant permissions for NT AUTHORITY\\SYSTEM on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsSystemPermission -SqlInstance sql2014 | Out-GridView -PassThru | Remove-DbsSystemPermission\nGets a list of non-compliant permissions for NT AUTHORITY\\SYSTEM, prompts to select specific permissions, then removes the selected permissions",
    "Description": "Removes non-compliant audit states\n\nIf you remove permissions for 'NT AUTHORITY\\SYSTEM' using this command and they continue to persist, check to ensure\nthat the permissions are not granted by a role such as sysadmin",
    "CommandName": "Remove-DbsSystemPermission",
    "Synopsis": "Remoes non-compliant audit states",
    "Alias": "",
    "Tags": "V-79129",
    "Syntax": "Remove-DbsSystemPermission [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <PSObject[]>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Remove-DbsSystemPermission",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "false",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows piping from Get-DbsSystemPermission",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbOwnerFixedServerRole -SqlInstance sql2017, sql2016, sql2012 | Remove-DbsDbOwnerFixedServerRole\nRemoves unauthorized users from their associated roles\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbOwnerFixedServerRole -SqlInstance sql2017, sql2016, sql2012 | Remove-DbsDbOwnerFixedServerRole -Confirm:$false\nRemoves unauthorized users from their associated roles and does not prompt\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsDbOwnerFixedServerRole -SqlInstance sql2017, sql2016, sql2012 | Out-GridView -Passthru | Remove-DbsDbOwnerFixedServerRole -Type SetOwner -NewOwner AD\\chantel.phillip -Confirm:$false\nSets the owner of the database to an authorized login, AD\\chantel.phillip",
    "Description": "Removes unauthorized users from roles and/or sets the owner of the database to an authorized login",
    "CommandName": "Repair-DbsDbOwnerFixedServerRole",
    "Synopsis": "Removes unauthorized users from roles and/or sets the owner of the database to an authorized login",
    "Alias": "",
    "Tags": "V-79111",
    "Syntax": "Repair-DbsDbOwnerFixedServerRole [[-InputObject] <PSObject[]>] [[-Type] <String[]>] [[-NewOwner] <String>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Repair-DbsDbOwnerFixedServerRole",
    "Params": [
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbsDbOwnerFixedServerRole",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "Type",
        "The type of repair - remove user from role, set a new db owner, or both\nOptions: \"RemoveRoleMember\", \"SetOwner\"",
        "",
        false,
        "false",
        "RemoveRoleMember"
      ],
      [
        "NewOwner",
        "The type of repair - remove user from role, set a new db owner, or both",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbAlterPermission -SqlInstance sql2017, sql2016, sql2012 | Revoke-DbsDbAlterPermission\nRevokes non-compliant alter permissions on sql2017, sql2016, sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbAlterPermission -SqlInstance sql2017, sql2016, sql2012 | Out-GridView -Passthru | Revoke-DbsDbAlterPermission -Confirm:$false\nRevokes _selected_ non-compliant alter permissions on sql2017, sql2016, sql2012, does not prompt",
    "Description": "Removes non-compliant alter permissions",
    "CommandName": "Revoke-DbsDbAlterPermission",
    "Synopsis": "Removes non-compliant alter permissions",
    "Alias": "",
    "Tags": [
      "V-79109",
      "V-79075",
      "V-79081"
    ],
    "Syntax": "Revoke-DbsDbAlterPermission [[-InputObject] <PSObject[]>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Revoke-DbsDbAlterPermission",
    "Params": [
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbsDbAlterPermission",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "",
    "Description": null,
    "CommandName": "Select-DefaultView",
    "Synopsis": "\r\nSelect-DefaultView [[-InputObject] <psobject>] [[-Property] <string[]>] [[-ExcludeProperty] <string[]>] [[-TypeName] <string>] [<CommonParameters>]\r\n",
    "Alias": "",
    "Syntax": "syntaxItem\r\n----------\r\n{@{name=Select-DefaultView; CommonParameters=True; parameter=System.Object[]}}",
    "Name": "Select-DefaultView",
    "Params": [
      [
        "ExcludeProperty",
        "",
        "",
        false,
        "false",
        null
      ],
      [
        "InputObject",
        "",
        "",
        false,
        "true (ByValue)",
        null
      ],
      [
        "Property",
        "",
        "",
        false,
        "false",
        null
      ],
      [
        "TypeName",
        "",
        "",
        false,
        "false",
        null
      ]
    ],
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsAcl -SqlInstance sql2017, sql2016, sql2012 -Account \"AD\\SQL Admins\" -Owner \"AD\\SQL Service\"\nSets permissions for the default data, log and backups on sql2017, sql2016, sql2012\nAdds appropriate permissions for the \"AD\\SQL Admins\" group as well as the SQL Server service accountsas Full Access\nAlso sets the owner of the folder to \"AD\\SQL Service\"\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbaRegServer -SqlInstance sqlcentral | Set-DbsAcl -Account \"AD\\SQL Admins\" -Owner \"AD\\SQL Service\"\nSets the appropriate permissions for all SQL Servers stored in the sqlcentral registered server",
    "Description": "Sets the required permissions for SQL Server directories\n\nBy default, it will detect and secure the default Data, Log and Backup directories",
    "CommandName": "Set-DbsAcl",
    "Synopsis": "Sets the permissions required by DISA for SQL Server directories",
    "Alias": "",
    "Tags": [
      "V-79215",
      "V-79151",
      "V-79153",
      "V-79155",
      "V-79163"
    ],
    "Syntax": "Set-DbsAcl [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Credential] <PSCredential>] [-Owner] <String> [-Account] <String[]> [[-Path] <String[]>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Set-DbsAcl",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances\nThis is required to get specific information about the paths to modify\nThe base computer name is also used to perform the actual modifications",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target _SQL Server_ instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "Credential",
        "Login to the target _Windows_ instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "Owner",
        "The account that will be set as the folder owner",
        "",
        true,
        "false",
        ""
      ],
      [
        "Account",
        "The account name or names that are to be granted permissions along with the service accounts",
        "",
        true,
        "false",
        ""
      ],
      [
        "Path",
        "By default, the ACLs on the paths to the data, log and backup files will be modified\nIf you want to set permissions on a specific path, use this option\nNote that if your Backup directory is a UNC share, it will be skipped",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsAuditLogin -SqlInstance sql2017, sql2016, sql2012\nSets \"Both failed and successful logins\" on sql2017, sql2016 and sql2012",
    "Description": "Sets \"Both failed and successful logins\"",
    "CommandName": "Set-DbsAuditLogin",
    "Synopsis": "Sets \"Both failed and successful logins\"",
    "Alias": "",
    "Tags": [
      "V-79297",
      "V-79287",
      "V-79289"
    ],
    "Syntax": "Set-DbsAuditLogin [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Set-DbsAuditLogin",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsAuditMaintainer -SqlInstance sql2017, sql2016, sql2012 -Login \"AD\\SQL Admins\"\nSet permissions for the SERVER_AUDIT_MAINTAINERS role on sql2017, sql2016, sql2012 for user AD\\SQL Admins on Prod database.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Set-DbsAuditMaintainer -SqlInstance sql2017, sql2016, sql2012 -Role auditmaintainers -Login \"AD\\SQL Admins\"\nSet permissions for the auditmaintainers role on sql2017, sql2016, sql2012 for user AD\\SQL Admins on Prod database.",
    "Description": "Create the audit maintainer role, sets the permissions for the role, and adds logins",
    "CommandName": "Set-DbsAuditMaintainer",
    "Synopsis": "Create the audit maintainer role, sets the permissions for the role, and adds logins\n\nNOTE! This command revokes permz.",
    "Alias": "",
    "Tags": [
      "V-79135",
      "V-79143"
    ],
    "Syntax": "Set-DbsAuditMaintainer [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Role] <String>] [-Login] <String[]> [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Set-DbsAuditMaintainer",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "Role",
        "Name to be given the audit maintainer role",
        "",
        false,
        "false",
        "SERVER_AUDIT_MAINTAINERS"
      ],
      [
        "Login",
        "The login or logins that are to be granted permissions. This should be a Windows Group or you may violate another STIG",
        "",
        true,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsAuditStartupState -SqlInstance sql2017, sql2016, sql2012\nSets startup state for compliance audit to ON on sql2017, sql2016 and sql2012",
    "Description": "Sets startup state for compliance audit to ON",
    "CommandName": "Set-DbsAuditStartupState",
    "Synopsis": "Sets startup state for compliance audit to ON",
    "Alias": "",
    "Tags": "V-79141",
    "Syntax": "Set-DbsAuditStartupState [-SqlInstance] <DbaInstanceParameter[]> [[-Audit] <String[]>] [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Set-DbsAuditStartupState",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Audit",
        "The name of the DISA Audit",
        "",
        false,
        "false",
        "(Get-PSFConfigValue -FullName dbadisa.app.auditname)"
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsConnectionLimit -SqlInstance sql2017, sql2016, sql2012 -Value 5000\nSets the max number of connections to 5000\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Set-DbsConnectionLimit -SqlInstance sql2017, sql2016, sql2012 -Value 5000 -WhatIf\nShows what would happen if the command would run",
    "Description": "Sets the max number of UserConnection\n\n\"If a mechanism other than a logon trigger is used, verify its correct operation by the appropriate means.\"",
    "CommandName": "Set-DbsConnectionLimit",
    "Synopsis": "Sets the max number of UserConnections",
    "Alias": "",
    "Tags": "V-79119",
    "Syntax": "Set-DbsConnectionLimit [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-Value] <Int32> [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Set-DbsConnectionLimit",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "Value",
        "The max number of connections that can connect to the SQL Server",
        "",
        true,
        "false",
        "0"
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsDbAuditMaintainer -SqlInstance sql2017, sql2016, sql2012 -User \"AD\\SQL Admins\"\nSet permissions for the DATABASE_AUDIT_MAINTAINERS role on sql2017, sql2016, sql2012 for user AD\\SQL Admins on Prod database.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Set-DbsDbAuditMaintainer -SqlInstance sql2017, sql2016, sql2012 -Role auditmaintainers -User \"AD\\SQL Admins\"\nSet permissions for the auditmaintainers role on sql2017, sql2016, sql2012 for user AD\\SQL Admins on Prod database.",
    "Description": "Creates the database audit maintainer role, sets the permissions for the role, adds logins and revokes permissions for other accounts",
    "CommandName": "Set-DbsDbAuditMaintainer",
    "Synopsis": "Creates the database audit maintainer role, sets the permissions for the role, adds logins and revokes permissions for other accounts",
    "Alias": "",
    "Tags": "V-79073",
    "Syntax": "Set-DbsDbAuditMaintainer [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Role] <String>] [-User] <String[]> [[-InputObject] <Database[]>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Set-DbsDbAuditMaintainer",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "Role",
        "Name to be given the audit maintainer role",
        "",
        false,
        "false",
        "DATABASE_AUDIT_MAINTAINERS"
      ],
      [
        "User",
        "The login or logins that are to be granted permissions. This should be a Windows Group or you may violate another STIG",
        "",
        true,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows piping from Get-DbsDbAuditMaintainer",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Tracy Boggiano (@TracyBoggiano), databasesuperhero.com",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsDbFileSize -SqlInstance sql2017, sql2016, sql2012\nSets all non-default sized database files on sql2017, sql2016, sql2012 to 64MB.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbaDatabase -SqlInstance sql2016 -Database test | Set-DbsDbFileSize -GrowthType GB -Growth 1\nSets the test database on sql2016 to a growth of 1GB\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Set-DbsDbFileSize -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command were executed",
    "Description": "Sets databases to a non-default growth and growth type. 64MB by default.",
    "CommandName": "Set-DbsDbFileSize",
    "Synopsis": "Sets databases to a non-default growth and growth type. 64MB by default.",
    "Alias": "",
    "Tags": "",
    "Syntax": "Set-DbsDbFileSize [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-GrowthType] <String>] [[-Growth] <Int32>] [[-InputObject] <Database[]>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Set-DbsDbFileSize",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "GrowthType",
        "The growth type, MB by default - valid values are MB, KB, GB or TB. MB by default",
        "",
        false,
        "false",
        "MB"
      ],
      [
        "Growth",
        "The growth value. 64 by default.",
        "",
        false,
        "false",
        "64"
      ],
      [
        "InputObject",
        "Allows piping from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsDbRecoveryModel -SqlInstance sql2017, sql2016, sql2012\nSets all user databases to the FULL recovery model on sql2017, sql2016, and sql2012",
    "Description": "Sets all user databases to the FULL recovery model",
    "CommandName": "Set-DbsDbRecoveryModel",
    "Synopsis": "Sets all user databases to the FULL recovery model",
    "Alias": "",
    "Tags": "V-79083",
    "Syntax": "Set-DbsDbRecoveryModel [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Set-DbsDbRecoveryModel",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows piping from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbSchemaOwner -SqlInstance sql2017, sql2016, sql2012 | Set-DbsDbSchemaOwner\nSets a schema owner for schemas per db on sql2017, sql2016, sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbSchemaOwner -SqlInstance sql2017, sql2016, sql2012 | Out-GridView -Passthru | Set-DbsDbSchemaOwner -Owner ad\\dbschemaowner -Confirm:$false\nSets a schema owner for _selected_ schemas on sql2017, sql2016, sql2012, does not prompt",
    "Description": "Sets a schema owner\n\nBasically performs ALTER AUTHORIZATION ON SCHEMA::[<Schema Name>] TO [<Principal Name>]",
    "CommandName": "Set-DbsDbSchemaOwner",
    "Synopsis": "Sets a schema owner",
    "Alias": "",
    "Tags": "V-79077",
    "Syntax": "Set-DbsDbSchemaOwner [[-InputObject] <PSObject[]>] [[-Owner] <String>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Set-DbsDbSchemaOwner",
    "Params": [
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbsDbSchemaOwner",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "Owner",
        "Sets the new owner",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsEndpointEncryption -SqlInstance sql2017, sql2016, sql2012 | Set-DbsEndpointEncryption\nSets non-compliant endpoint encryption algorithms to AES on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsEndpointEncryption -SqlInstance sql2017, sql2016, sql2012 | Out-GridView -Passthru | Set-DbsEndpointEncryption\nSets selected non-compliant endpoint encryption algorithms to AES on sql2017, sql2016 and sql2012",
    "Description": "Sets non-compliant endpoint encryption algorithms for non-compliant endpoints",
    "CommandName": "Set-DbsEndpointEncryption",
    "Synopsis": "Sets non-compliant endpoint encryption algorithms for non-compliant endpoints",
    "Alias": "",
    "Tags": [
      "V-79323",
      "V-79325"
    ],
    "Syntax": "Set-DbsEndpointEncryption [-InputObject] <Endpoint[]> [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Set-DbsEndpointEncryption",
    "Params": [
      [
        "InputObject",
        "Allows piping from Get-DbaEndpoint",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsLoginProperty -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant login properties from sql2017, sql2016 and sql2012",
    "Description": "Sets login properties, PasswordExpirationEnabled and PasswordPolicyEnforced, to true",
    "CommandName": "Set-DbsLoginProperty",
    "Synopsis": "Sets login properties, PasswordExpirationEnabled and PasswordPolicyEnforced, to true",
    "Alias": "",
    "Tags": "V-79191",
    "Syntax": "Set-DbsLoginProperty [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Set-DbsLoginProperty",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials. Accepts PowerShell credentials (Set-Credential).\nWindows Authentication, SQL Server Authentication, Active Directory - Password, and Active Directory - Integrated are all supported.\nFor MFA support, please use Connect-DbaInstance.",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsTraceFlag -SqlInstance sql2017, sql2016, sql2012\nSets the 3625 trace flag on sql2017, sql2016, and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Set-DbsTraceFlag -SqlInstance sql2017, sql2016, sql2012 -Confirm:$false\nSets the 3625 trace flag on sql2017, sql2016, and sql2012 without confirmation prompts",
    "Description": "Sets trace flag 3625 to hide information from non-sysadmins in error messages",
    "CommandName": "Set-DbsTraceFlag",
    "Synopsis": "Sets trace flag 3625",
    "Alias": "",
    "Tags": [
      "V-79097",
      "V-79217"
    ],
    "Syntax": "Set-DbsTraceFlag [-SqlInstance] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "Name": "Set-DbsTraceFlag",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target _Windows_ instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "WhatIf",
        "If this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run",
        "wi",
        false,
        "false",
        ""
      ],
      [
        "Confirm",
        "If this switch is enabled, you will be prompted for confirmation before executing any operations that change state",
        "cf",
        false,
        "false",
        ""
      ]
    ],
    "Author": "Tracy Boggiano (@TracyBoggiano), databasesuperhero.com",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Test-DbsBuild -SqlInstance sql2017, sql2016, sql2012\nObtains evidence that software patches are consistently applied to SQL Server within the time frame defined for each patch",
    "Description": "Obtains evidence that software patches are consistently applied to SQL Server within the time frame defined for each patch",
    "CommandName": "Test-DbsBuild",
    "Synopsis": "Obtains evidence that software patches are consistently applied to SQL Server within the time frame defined for each patch",
    "Alias": "",
    "Tags": "V-79249",
    "Syntax": "Test-DbsBuild [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Test-DbsBuild",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Test-DbsDbInputValidity -SqlInstance sql2017, sql2016, sql2012\nTests a db to see if it's got contraints on sql2017, sql2016 and sql2012",
    "Description": "Tests a db to see if it's got contraints",
    "CommandName": "Test-DbsDbInputValidity",
    "Synopsis": "Tests a db to see if it's got contraints",
    "Alias": "",
    "Tags": "V-79095",
    "Syntax": "Test-DbsDbInputValidity [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "Name": "Test-DbsDbInputValidity",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "SqlCredential",
        "Login to the target instance using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Test-DbsDiskSpace -ComputerName sql01\nReturns a list of non-compliant disks that fall below the threshold (25% by default)",
    "Description": "Returns a list of non-compliant disks that fall below the threshold (25% by default)",
    "CommandName": "Test-DbsDiskSpace",
    "Synopsis": "Returns a list of non-compliant disks that fall below the threshold (25% by default)",
    "Alias": "",
    "Tags": [
      "V-79229",
      "NonCompliantResults"
    ],
    "Syntax": "Test-DbsDiskSpace [[-ComputerName] <DbaInstanceParameter[]>] [[-Credential] <PSCredential>] [[-InputObject] <DiskSpace[]>] [[-Threshold] <Int32>] [-EnableException] [<CommonParameters>]",
    "Name": "Test-DbsDiskSpace",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows piping from Get-DbaDiskSpace",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "Threshold",
        "The minimum disk space free threshold",
        "",
        false,
        "false",
        "25"
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Test-DbsInstallPath -ComputerName sql01\nTests the installation path for all instances on sql01 to ensure they are not part of the Windows directory or in an application folder",
    "Description": "Tests the installation path to ensure it is not part of the Windows directory or in an application folder",
    "CommandName": "Test-DbsInstallPath",
    "Synopsis": "Tests the installation path to ensure it is not part of the Windows directory or in an application folder",
    "Alias": "",
    "Tags": "V-79169",
    "Syntax": "Test-DbsInstallPath [[-ComputerName] <DbaInstanceParameter[]>] [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Test-DbsInstallPath",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Test-DbsServiceAccount -ComputerName sql01\nTests all SQL Server related services to ensure none have the same service account",
    "Description": "Tests all SQL Server related services on a server to ensure none have the same service account",
    "CommandName": "Test-DbsServiceAccount",
    "Synopsis": "Tests all SQL Server related services on a server to ensure none have the same service account",
    "Alias": "",
    "Tags": "V-79245",
    "Syntax": "Test-DbsServiceAccount [[-ComputerName] <DbaInstanceParameter[]>] [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Test-DbsServiceAccount",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Test-DbsSpn -ComputerName sql2016, sql2017, sql2012\nGets all instances that do not have an SPN from sql2016, sql2017 and sql2012",
    "Description": "Returns a list of instances that do not have an SPN",
    "CommandName": "Test-DbsSpn",
    "Synopsis": "Returns a list of instances that do not have an SPN",
    "Alias": "",
    "Tags": "V-79123",
    "Syntax": "Test-DbsSpn [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "Name": "Test-DbsSpn",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Credential",
        "Login to the target computer using alternative credentials.",
        "",
        false,
        "false",
        ""
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically Gets advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS > $null = Test-ElevationRequirement -ComputerName $instance -Continue\nThis will test whether the currently processed instance is localhost and the process is running elevated.\r\nIf it should have elevation but is not running with elevation:\r\n- In silent mode it will terminate with an exception\r\n- In default mode, it will continue with the next instance\n-------------------------- EXAMPLE 2 --------------------------\nPS > if (-not ( Test-ElevationRequirement -ComputerName $instance -NoStop)) {\r\n    # Do whatever\r\n}\nThis will test whether the currently processed instance is localhost and the process is running elevated.\r\nIf it isn't running elevated but should be, the overall condition will be met and the if-block is executed.",
    "Description": "Command that tests, whether the process runs elevated and has to run as such.\nSome commands require to be run elevated, when executed against localhost, but not when run against a remote computer.\nThis command handles that test and manages the reaction to it.",
    "CommandName": "Test-ElevationRequirement",
    "Synopsis": "Command that tests, whether the process runs elevated and has to run as such.",
    "Alias": "",
    "Syntax": "Test-ElevationRequirement [-ComputerName <DbaInstanceParameter>] [-Continue] [-ContinueLabel <String>] [-SilentlyContinue] [-EnableException <Boolean>] [<CommonParameters>]\nTest-ElevationRequirement [-ComputerName <DbaInstanceParameter>] [-NoStop] [-EnableException <Boolean>] [<CommonParameters>]",
    "Name": "Test-ElevationRequirement",
    "Params": [
      [
        "ComputerName",
        "The computer that is being targeted by the calling command.\r\nThis must be a localhost variety, for it to be able to fail.",
        "",
        false,
        "false",
        ""
      ],
      [
        "Continue",
        "When using the native capability to terminate on fail, this will call continue in non-EnableException mode.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "ContinueLabel",
        "When using the native capability to terminate on fail, and using a continue mode, the continue will continue with this label.",
        "",
        false,
        "false",
        ""
      ],
      [
        "SilentlyContinue",
        "When using the native capability to terminate on fail, this will call continue in EnableException mode.",
        "",
        false,
        "false",
        "False"
      ],
      [
        "NoStop",
        "Does not call Stop-PSFFunction when the test fails, rather only returns $false instead",
        "",
        false,
        "false",
        "False"
      ],
      [
        "EnableException",
        "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
        "",
        false,
        "false",
        "$EnableException"
      ]
    ],
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  },
  {
    "Examples": "",
    "Description": null,
    "CommandName": "Write-ProgressHelper",
    "Synopsis": "\r\nWrite-ProgressHelper [[-StepNumber] <int>] [[-Activity] <string>] [[-Message] <string>] [[-TotalSteps] <int>] [-ExcludePercent]\r\n",
    "Alias": "",
    "Syntax": "syntaxItem\r\n----------\r\n{@{name=Write-ProgressHelper; CommonParameters=False; parameter=System.Object[]}}",
    "Name": "Write-ProgressHelper",
    "Params": [
      [
        "Activity",
        "",
        "",
        false,
        "false",
        null
      ],
      [
        "ExcludePercent",
        "",
        "NoProgress",
        false,
        "false",
        null
      ],
      [
        "Message",
        "",
        "",
        false,
        "false",
        null
      ],
      [
        "StepNumber",
        "",
        "",
        false,
        "false",
        null
      ],
      [
        "TotalSteps",
        "",
        "",
        false,
        "false",
        null
      ]
    ],
    "Links": null,
    "Availability": "Windows, Linux, macOS"
  }
]
