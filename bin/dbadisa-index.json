[
  {
    "Description": "Disables and stops the SQL Server Browser service on computers with no named instances",
    "Alias": "",
    "Author": "Tracy Boggiano (@TracyBoggiano), databasesuperhero.com",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsBrowser -ComputerName sql2016, sql2019\nDisables and stops the SQL Server Browser service on sql2016 and sql2019 if no named instances exist",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables and stops the SQL Server Browser service on computers with no named instances",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsBrowser",
    "Syntax": "Disable-DbsBrowser [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsBrowser",
    "Tags": [
      "V-79353",
      "V-79349"
    ]
  },
  {
    "Description": "Disables all instances of CEIP on a server via both services and the registry (x64 and x86)",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsCEIP -ComputerName sql2016, sql2017, sql2012\nDisables all instances of CEIP on sql2016, sql2017 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsCEIP -ComputerName sql2016, sql2017, sql2012 -Credential ad\\altdba\nDisables all instances of CEIP on sql2016, sql2017 and sql2012 using alternative Windows credentials",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables all instances of CEIP on a server via both services and the registry (x64 and x86)",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsCEIP",
    "Syntax": "Disable-DbsCEIP [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsCEIP",
    "Tags": [
      "V-79313",
      "V-79315"
    ]
  },
  {
    "Description": "Disables database containment features",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsDbContainment -SqlInstance sql2017, sql2016, sql2012\nDisables database containment features on sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables database containment features",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsDbContainment",
    "Syntax": "Disable-DbsDbContainment [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsDbContainment",
    "Tags": "V-79061"
  },
  {
    "Description": "Disables external scripts",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsExternalScripts -SqlInstance sql2017, sql2016, sql2012\nDisables external scripts on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsExternalScripts -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables external scripts",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsExternalScripts",
    "Syntax": "Disable-DbsExternalScripts [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsExternalScripts",
    "Tags": "V-79347"
  },
  {
    "Description": "Disables non-compliant filestream access settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsFilestreamAccess -SqlInstance sql2017, sql2016, sql2012\nDisables filestream access on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsFilestreamAccess -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables non-compliant filestream access settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsFilestreamAccess",
    "Syntax": "Disable-DbsFilestreamAccess [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsFilestreamAccess",
    "Tags": [
      "V-79329",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Disables non-compliant Hadoop connectivity settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsHadoopConnectivity -SqlInstance sql2017, sql2016, sql2012\nDisables Hadoop connectivity on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsHadoopConnectivity -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables non-compliant Hadoop connectivity settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsHadoopConnectivity",
    "Syntax": "Disable-DbsHadoopConnectivity [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsHadoopConnectivity",
    "Tags": [
      "V-79341",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Disables mixed mode authentication",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsMixedMode -SqlInstance sql2017, sql2016, sql2012\nDisables mixed mode on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsMixedMode -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if you ran the command",
    "Params": [
      [
        "SqlInstance",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables mixed mode authentication",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsMixedMode",
    "Syntax": "Disable-DbsMixedMode [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsMixedMode",
    "Tags": [
      "V-79121",
      "V-79355"
    ]
  },
  {
    "Description": "Disables non-compliant OLE automation procedures settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsOleAutomation -SqlInstance sql2017, sql2016, sql2012\nDisables OLE automation procedures on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsOleAutomation -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables non-compliant OLE automation procedures settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsOleAutomation",
    "Syntax": "Disable-DbsOleAutomation [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsOleAutomation",
    "Tags": "V-79333"
  },
  {
    "Description": "Disables non-compliant Polybase export settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsPolybaseExport -SqlInstance sql2017, sql2016, sql2012\nDisables Polybase export on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsPolybaseExport -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables non-compliant Polybase export settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsPolybaseExport",
    "Syntax": "Disable-DbsPolybaseExport [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsPolybaseExport",
    "Tags": "V-79343"
  },
  {
    "Description": "Disables all non-tcp protocols for all instances on a computer, enables TCP\n\nSettings go into effect after the SQL Service has been restarted",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsProtocol -ComputerName sql01\nDisables all protocols except for tcp for all instances on sql01\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsProtocol -ComputerName sql01 -Whatif\nShows what protocols on what instance would be disabled if the command would run",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "cn,host,Server",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables all non-tcp protocols for all instances on a computer, enables TCP",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsProtocol",
    "Syntax": "Disable-DbsProtocol [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsProtocol",
    "Tags": [
      "V-79185",
      "V-79241"
    ]
  },
  {
    "Description": "Disables non-compliant Remote Access settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsRemoteAccess -SqlInstance sql2017, sql2016, sql2012\nDisables Remote Access on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsRemoteAccess -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables non-compliant Remote Access settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsRemoteAccess",
    "Syntax": "Disable-DbsRemoteAccess [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsRemoteAccess",
    "Tags": [
      "V-79337",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Disables non-compliant Remote Data Archive settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsRemoteDataArchive -SqlInstance sql2017, sql2016, sql2012\nDisables Remote Data Archive on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsRemoteDataArchive -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables non-compliant Remote Data Archive settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsRemoteDataArchive",
    "Syntax": "Disable-DbsRemoteDataArchive [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsRemoteDataArchive",
    "Tags": [
      "V-79345",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Disables replication XPs",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsReplicationXp -SqlInstance sql2017, sql2016, sql2012\nDisables replication XPs on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsReplicationXp -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables replication XPs",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsReplicationXp",
    "Syntax": "Disable-DbsReplicationXp [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsReplicationXp",
    "Tags": "V-79351"
  },
  {
    "Description": "Disable and/or rename sa account",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsSaAccount -SqlInstance Sql2016 -NewName newsa\nDisables and renames sa account",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "NewName",
        "NewName for sa account",
        "",
        false,
        "false",
        ""
      ]
    ],
    "Synopsis": "Disable and/or rename sa account",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsSaAccount",
    "Syntax": "Disable-DbsSaAccount [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-NewName] <String>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsSaAccount",
    "Tags": [
      "V-79319",
      "V-79317"
    ]
  },
  {
    "Description": "Disables SQL Server CLR Integration",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsSqlClr -SqlInstance sql2017, sql2016, sql2012\nDisables CLR on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsSqlClr -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables SQL Server CLR Integration",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsSqlClr",
    "Syntax": "Disable-DbsSqlClr [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsSqlClr",
    "Tags": [
      "V-79179",
      "V-79243"
    ]
  },
  {
    "Description": "Disables non-compliant User Options settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsUserOptions -SqlInstance sql2017, sql2016, sql2012\nDisables User Options on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsUserOptions -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables non-compliant User Options settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsUserOptions",
    "Syntax": "Disable-DbsUserOptions [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsUserOptions",
    "Tags": "V-79335"
  },
  {
    "Description": "Disables xp_cmdshell",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Disable-DbsXPCmdShell -SqlInstance sql2017, sql2016, sql2012\nDisables xp_cmdshell on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Disable-DbsXPCmdShell -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Disables xp_cmdshell",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Disable-DbsXPCmdShell",
    "Syntax": "Disable-DbsXPCmdShell [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Disable-DbsXPCmdShell",
    "Tags": "V-79177"
  },
  {
    "Description": "Enables Common Criteria Compliance Criteria Compliance",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Enable-DbsC2 -SqlInstance sql2017, sql2016, sql2012\nEnables Common Criteria Compliance Criteria Compliance on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Enable-DbsC2 -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command would run",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Enables Common Criteria Compliance Criteria Compliance",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Enable-DbsC2",
    "Syntax": "Enable-DbsC2 [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Enable-DbsC2",
    "Tags": "V-79211"
  },
  {
    "Description": "Enables FIPS",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Enable-DbsFips -ComputerName sql2016, sql2017, sql2012\nEnables FIPS on sql2016, sql2017 and sql2012",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Enables FIPS",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Enable-DbsFips",
    "Syntax": "Enable-DbsFips [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Enable-DbsFips",
    "Tags": [
      "V-67871",
      "V-79113",
      "V-79197",
      "V-79199",
      "V-79203",
      "V-79305",
      "V-79307",
      "V-79309"
    ]
  },
  {
    "Description": "Gets the required permissions for SQL Server directories\n\nBy default, it will detect and secure the default Data, Log and Backup directories",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAcl -SqlInstance sql2017, sql2016, sql2012\nGets permissions for the default data, log and backups on sql2017, sql2016, sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbaRegServer -SqlInstance sqlcentral | Get-DbsAcl\nGets the permissions for all SQL Servers stored in the sqlcentral registered server",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Path",
        "By default, the ACLs on the paths to the data, log and backup files will be modified.\nIf you want to set permissions on a specific path, use this option.\nNote that if your Backup directory is a UNC share, it will be skipped.",
        "",
        false,
        "false",
        ""
      ]
    ],
    "Synopsis": "Gets the permissions required by DISA for SQL Server directories",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsAcl",
    "Syntax": "Get-DbsAcl [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Credential] <PSCredential>] [[-Path] <String[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsAcl",
    "Tags": [
      "V-79215",
      "V-79151",
      "V-79153",
      "V-79155",
      "V-79163"
    ]
  },
  {
    "Description": "Gets members of the sysadmin and securityadmin server roles",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAdminRoleMember -SqlInstance sql2017, sql2016, sql2012\nGets members of the sysadmin and securityadmin server roles on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsAdminRoleMember -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\serverroles.csv -NoTypeInformation\nGets members of the sysadmin and securityadmin server roles and exports them to D:\\DISA\\serverroles.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets members of the sysadmin and securityadmin server roles",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsAdminRoleMember",
    "Syntax": "Get-DbsAdminRoleMember [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsAdminRoleMember",
    "Tags": [
      "V-79217",
      "V-79219",
      "V-79235"
    ]
  },
  {
    "Description": "Checks both Agent Alerts and Database Mail to ensure SQL Server provides immediate, real-time alerts to appropriate support staff",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAlert -SqlInstance sql2017, sql2016, sql2012\nChecks to ensure both Agent Alerts and Database Mail to ensure SQL Server provides immediate, real-time alerts to appropriate support staff",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Checks both Agent Alerts and Database Mail to ensure SQL Server provides immediate, real-time alerts to appropriate support staff",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsAlert",
    "Syntax": "Get-DbsAlert [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsAlert",
    "Tags": [
      "V-79231",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets a list of non-compliant audit states",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditDisabled -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit states on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsAuditDisabled -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit states on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsAuditDisabled -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\auditstates.csv -NoTypeInformation\nGets a list of non-compliant audit states sql2017, sql2016 and sql2012 to D:\\disa\\auditstates.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Audit",
        "The name of the DISA Audit",
        "",
        false,
        "false",
        "(Get-PSFConfigValue -FullName dbadisa.app.auditname)"
      ]
    ],
    "Synopsis": "Gets a list of non-compliant audit states",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsAuditDisabled",
    "Syntax": "Get-DbsAuditDisabled [-SqlInstance] <DbaInstanceParameter[]> [[-Audit] <String[]>] [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsAuditDisabled",
    "Tags": [
      "V-79133",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets a list of non-compliant audit filters",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditFilter -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit filters on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsAuditFilter -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit filters on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsAuditFilter -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\auditfilters.csv -NoTypeInformation\nGets a list of non-compliant audit filters sql2017, sql2016 and sql2012 to D:\\disa\\auditfilters.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Audit",
        "The name of the DISA Audit",
        "",
        false,
        "false",
        "(Get-PSFConfigValue -FullName dbadisa.app.auditname)"
      ]
    ],
    "Synopsis": "Gets a list of non-compliant audit filters",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsAuditFilter",
    "Syntax": "Get-DbsAuditFilter [-SqlInstance] <DbaInstanceParameter[]> [[-Audit] <String[]>] [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsAuditFilter",
    "Tags": [
      "V-79303",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Returns a list of non-compliant servers that are not auditing logins either by Audits or via \"Both failed and successful logins\"",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditLogin -SqlInstance sql2017, sql2016, sql2012\nReturns a list of non-compliant servers that are not auditing logins either by Audits or via \"Both failed and successful logins\"",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of non-compliant servers that are not auditing logins either by Audits or via \"Both failed and successful logins\"",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsAuditLogin",
    "Syntax": "Get-DbsAuditLogin [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsAuditLogin",
    "Tags": [
      "V-79297",
      "V-79287",
      "V-79289",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Returns a list of the server roles and individual logins that have permissions which enable the ability to create and maintain audit definitions.",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditMaintainer -SqlInstance sql2017, sql2016, sql2012\nReturns a list of audit maintainers for sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of the server roles and individual logins that have permissions which enable the ability to create and maintain audit definitions.",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsAuditMaintainer",
    "Syntax": "Get-DbsAuditMaintainer [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsAuditMaintainer",
    "Tags": [
      "V-79135",
      "V-79143",
      "V-79159",
      "V-79161"
    ]
  },
  {
    "Description": "Gets a list of non-compliant max values (rollover and file size)",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditMaxValue -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant max values (rollover and file size) for sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsAuditMaxValue -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\maxvalues.csv -NoTypeInformation\nExports a list of non-compliant max values (rollover and file size) on sql2017, sql2016 and sql2012 to D:\\disa\\maxvalues.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Audit",
        "The name of the DISA Audit.",
        "",
        false,
        "false",
        "(Get-PSFConfigValue -FullName dbadisa.app.auditname)"
      ]
    ],
    "Synopsis": "Gets a list of non-compliant max values (rollover and file size)",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsAuditMaxValue",
    "Syntax": "Get-DbsAuditMaxValue [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Audit] <String[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsAuditMaxValue",
    "Tags": [
      "V-79149",
      "V-79227",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets a list of non-compliant audit onfailure actions",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditOnFailure -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit onfailure actions for sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsAuditOnFailure -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\auditonfailure.csv -NoTypeInformation\nExports a list of instance permissions for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\auditonfailure.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Audit",
        "The name of the DISA Audit",
        "",
        false,
        "false",
        "(Get-PSFConfigValue -FullName dbadisa.app.auditname)"
      ]
    ],
    "Synopsis": "Gets a list of non-compliant audit onfailure actions",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsAuditOnFailure",
    "Syntax": "Get-DbsAuditOnFailure [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Audit] <String[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsAuditOnFailure",
    "Tags": [
      "V-79147",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets a list of audits that record when privileges/permissions are retrieved or are failed to be retrieved",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditSchemaAccessGroup -SqlInstance sql2017, sql2016, sql2012\nGets a list of audits that record when privileges/permissions are retrieved or are failed to be retrieved for sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets a list of audits that record when privileges/permissions are retrieved or are failed to be retrieved",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsAuditSchemaAccessGroup",
    "Syntax": "Get-DbsAuditSchemaAccessGroup [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsAuditSchemaAccessGroup",
    "Tags": [
      "V-79137",
      "V-79139",
      "V-79301",
      "V-79299",
      "V-79251",
      "V-79253",
      "V-79255",
      "V-79257",
      "V-79267",
      "V-79269",
      "V-79271",
      "V-79273",
      "V-79279",
      "V-79281",
      "V-79283",
      "V-79285",
      "V-79301"
    ]
  },
  {
    "Description": "Returns a list of missing audit specifications",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditSpecification -SqlInstance sql2017, sql2016, sql2012\nReturns a list of missing audit specifications for sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of missing audit specifications",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsAuditSpecification",
    "Syntax": "Get-DbsAuditSpecification [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsAuditSpecification",
    "Tags": [
      "V-79239",
      "V-79259",
      "V-79261",
      "V-79263",
      "V-79265",
      "V-79275",
      "V-79277",
      "V-79291",
      "V-79293",
      "V-79295"
    ]
  },
  {
    "Description": "Gets a list of non-compliant audit startup states",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsAuditStartupState -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit states on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsAuditStartupState -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit states on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsAuditStartupState -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\auditstartup.csv -NoTypeInformation\nGets a list of non-compliant audit startup states sql2017, sql2016 and sql2012 to D:\\disa\\auditstartup.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Audit",
        "The name of the DISA Audit.",
        "",
        false,
        "false",
        "(Get-PSFConfigValue -FullName dbadisa.app.auditname)"
      ]
    ],
    "Synopsis": "Gets a list of non-compliant audit startup states",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsAuditStartupState",
    "Syntax": "Get-DbsAuditStartupState [-SqlInstance] <DbaInstanceParameter[]> [[-Audit] <String[]>] [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsAuditStartupState",
    "Tags": [
      "V-79141",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets non-compliant SQL Browser service states (Running)",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsBrowser -ComputerName Sql2016\nGets non-compliant SQL Browser services",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets non-compliant SQL Browser service states (Running)",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsBrowser",
    "Syntax": "Get-DbsBrowser [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsBrowser",
    "Tags": [
      "V-79353",
      "V-79349",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets non-compliant Common Criteria Compliance settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsC2Disabled -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Common Criteria Compliance settings from sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets non-compliant Common Criteria Compliance settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsC2",
    "Syntax": "Get-DbsC2 [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsC2",
    "Tags": [
      "V-79211",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Returns a list of accounts that have installed or modified SQL Server",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsCEIP -ComputerName sql2016, sql2017, sql2012\nReturns a list of accounts that have isntalled or modified SQL Server on sql2016, sql2017 and sql2012",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of accounts that have installed or modified SQL Server",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsCEIP",
    "Syntax": "Get-DbsCEIP [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsCEIP",
    "Tags": [
      "V-79313",
      "V-79315"
    ]
  },
  {
    "Description": "Returns a list of all server logins that are computers",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsComputerLogin -SqlInstance sql2017, sql2016, sql2012\nReturns a list of all server logins that are computers for sql2017, sql2016, and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsComputerLogin -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\computeruser.csv -NoTypeInformation\nExports a list of all server logins that are computers to D:\\disa\\computeruser.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of all server logins that are computers",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsComputerLogin",
    "Syntax": "Get-DbsComputerLogin [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsComputerLogin",
    "Tags": "V-79131"
  },
  {
    "Description": "Returns a list non-standard extended procedures",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsCustomXp -SqlInstance sql2017, sql2016, sql2012\nReturns a list non-standard extended procedures for sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list non-standard extended procedures",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsCustomXp",
    "Syntax": "Get-DbsCustomXp [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsCustomXp",
    "Tags": "V-79181"
  },
  {
    "Description": "Gathers information for for object ownership and authorization delegation to be documented",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbAccessControl -SqlInstance sql2017, sql2016, sql2012\nGathers information for for object ownership and authorization delegation for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbAccessControl -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\access.csv -NoTypeInformation\nExports information for for object ownership and authorization delegation for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\access.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gathers information for for object ownership and authorization delegation to be documented",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbAccessControl",
    "Syntax": "Get-DbsDbAccessControl [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbAccessControl",
    "Tags": [
      "V-79105",
      "V-79235"
    ]
  },
  {
    "Description": "Gets non-compliant alter permissions",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbAlterPermission -SqlInstance sql2017, sql2016, sql2012\nGets non-compliant alter permissions on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbAlterPermission -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\alter.csv -NoTypeInformation\nExports all non-compliant alter permissions for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\alter.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets non-compliant alter permissions",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbAlterPermission",
    "Syntax": "Get-DbsDbAlterPermission [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbAlterPermission",
    "Tags": [
      "V-79109",
      "V-79075",
      "V-79081",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Returns a list of the database roles and individual users that have permissions which enable the ability to create and maintain audit definitions",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbAuditMaintainer -SqlInstance sql2017, sql2016, sql2012\nReturns a list of audit maintainers for sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of the database roles and individual users that have permissions which enable the ability to create and maintain audit definitions",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbAuditMaintainer",
    "Syntax": "Get-DbsDbAuditMaintainer [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbAuditMaintainer",
    "Tags": "V-79073"
  },
  {
    "Description": "Returns a list of all database user accounts that are computers",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbComputerUser -SqlInstance sql2017, sql2016, sql2012\nReturns a list of all database user accounts that are computers for sql2017, sql2016, and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbComputerUser -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\computeruser.csv -NoTypeInformation\nExports a list of all database user accounts that are computers to D:\\disa\\computeruser.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of all database user accounts that are computers",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbComputerUser",
    "Syntax": "Get-DbsDbComputerUser [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbComputerUser",
    "Tags": "V-79067"
  },
  {
    "Description": "Returns a list of non-compliant users for all contained databases",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbContainedUser -SqlInstance sql2017, sql2016, sql2012\nReturns a list of non-compliant users for all contained databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbContainedUser -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\contained.csv -NoTypeInformation\nExports a list of non-compliant users for all contained databases on sql2017, sql2016 and sql2012 to D:\\disa\\contained.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of non-compliant users for all contained databases",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbContainedUser",
    "Syntax": "Get-DbsDbContainedUser [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbContainedUser",
    "Tags": [
      "V-79193",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets a list of stored procedures and functions that utilize impersonation (EXECUTE AS)",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbExecuteAs -SqlInstance sql2017, sql2016, sql2012\nGets a list of stored procedures and functions that utilize impersonation (EXECUTE AS) for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbExecuteAs -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\contained.csv -NoTypeInformation\nExports a list of stored procedures and functions that utilize impersonation for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\contained.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets a list of stored procedures and functions that utilize impersonation (EXECUTE AS)",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbExecuteAs",
    "Syntax": "Get-DbsDbExecuteAs [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbExecuteAs",
    "Tags": "V-79107"
  },
  {
    "Description": "Returns a listing of accounts currently configured for use by external processes",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbExternalProcessAccess -SqlInstance sql2017, sql2016, sql2012\nReturns a listing of accounts currently configured for use by external processes for sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a listing of accounts currently configured for use by external processes",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbExternalProcessAccess",
    "Syntax": "Get-DbsDbExternalProcessAccess [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbExternalProcessAccess",
    "Tags": "V-79221"
  },
  {
    "Description": "Returns a list of all input validations",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbInputValidity -SqlInstance sql2017, sql2016, sql2012\nReturns a list of all input validations\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbInputValidity -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\checks.csv -NoTypeInformation\nExports input validation for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\checks.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of all input validations",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbInputValidity",
    "Syntax": "Get-DbsDbInputValidity [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbInputValidity",
    "Tags": "V-79095"
  },
  {
    "Description": "Returns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbKeyEncryptedByPassword -SqlInstance sql2017, sql2016, sql2012\nReturns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbKeyEncryptedByPassword -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\access.csv -NoTypeInformation\nReturns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\access.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbKeyEncryptedByPassword",
    "Syntax": "Get-DbsDbKeyEncryptedByPassword [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbKeyEncryptedByPassword",
    "Tags": [
      "V-79085",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Returns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbKeyNotEncryptedByServer -SqlInstance sql2017, sql2016, sql2012\nReturns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbKeyNotEncryptedByServer -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\access.csv -NoTypeInformation\nReturns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\access.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of non-compliant Database Master Key that are not encrypted by the Service Master Key",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbKeyNotEncryptedByServer",
    "Syntax": "Get-DbsDbKeyNotEncryptedByServer [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbKeyNotEncryptedByServer",
    "Tags": [
      "V-79087",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Obtains a listing of users and roles who are currently capable of changing stored procedures, functions, and triggers",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbModuleAccess -SqlInstance sql2017, sql2016, sql2012\nGets a listing of users and roles who are currently capable of changing stored procedures, functions, and triggers for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbModuleAccess -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\modulechanger.csv -NoTypeInformation\nExports a listing of users and roles who are currently capable of changing stored procedures, functions, and triggers for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\modulechanger.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Obtains a listing of users and roles who are currently capable of changing stored procedures, functions, and triggers",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbModuleAccess",
    "Syntax": "Get-DbsDbModuleAccess [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbModuleAccess",
    "Tags": "V-79075"
  },
  {
    "Description": "Returns SQL Server accounts that own database objects. These users are presumed to be authorized.",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbObjectOwner -SqlInstance sql2017, sql2016, sql2012\nGets SQL Server accounts that own database objects for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbObjectOwner -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\dbobjowners.csv -NoTypeInformation\nGets SQL Server accounts that own database objects for sql2017, sql2016 and sql2012 to D:\\disa\\dbobjowners.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns SQL Server accounts that own database objects. These users are presumed to be authorized.",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbObjectOwner",
    "Syntax": "Get-DbsDbObjectOwner [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbObjectOwner",
    "Tags": "V-79079"
  },
  {
    "Description": "Gets a listing of user databases whose owner is a member of a fixed server role",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbOwnerFixedServerRole -SqlInstance sql2017, sql2016, sql2012\nGets a listing of user databases whose owner is a member of a fixed server role for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbOwnerFixedServerRole -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\fixedserverrole.csv -NoTypeInformation\nExports a list of user databases whose owner is a member of a fixed server role for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\fixedserverrole.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets a listing of user databases whose owner is a member of a fixed server role",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbOwnerFixedServerRole",
    "Syntax": "Get-DbsDbOwnerFixedServerRole [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbOwnerFixedServerRole",
    "Tags": "V-79111"
  },
  {
    "Description": "Gets a list of database permissions using the 'Database permission assignments to users and roles.sql' file provided by DISA",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of database permissions for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of database permissions for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsDbPermission -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\dbperms.csv -NoTypeInformation\nExports a list of database permissions for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\dbperms.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets a list of database permissions using the 'Database permission assignments to users and roles.sql' file provided by DISA",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbPermission",
    "Syntax": "Get-DbsDbPermission [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbPermission",
    "Tags": [
      "V-79125",
      "V-79065"
    ]
  },
  {
    "Description": "Gets a list of prohibited key algorithms",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbProhibitedKeyAlgorithm -SqlInstance sql2017\nGets a list of prohibited key algorithms for all databases on sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets a list of prohibited key algorithms",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbProhibitedKeyAlgorithm",
    "Syntax": "Get-DbsDbProhibitedKeyAlgorithm [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbProhibitedKeyAlgorithm",
    "Tags": [
      "V-79113",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Returns a list of all non-compliant (non-full) database recovery models",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbRecoveryModel -SqlInstance sql2017, sql2016, sql2012\nReturns a list of all non-compliant (non-full) database recovery models.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbRecoveryModel -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\recovery.csv -NoTypeInformation\nExports all non-compliant (non-full) database recovery models for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\recovery.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of all non-compliant (non-full) database recovery models",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbRecoveryModel",
    "Syntax": "Get-DbsDbRecoveryModel [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbRecoveryModel",
    "Tags": [
      "V-79083",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Returns a list of all schema owners",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbSchemaOwner -SqlInstance sql2017, sql2016, sql2012\nReturns a list of all schema owners\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbSchemaOwner -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\schemaowners.csv -NoTypeInformation\nExports a list of all schema owners for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\schemaowners.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of all schema owners",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbSchemaOwner",
    "Syntax": "Get-DbsDbSchemaOwner [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbSchemaOwner",
    "Tags": "V-79077"
  },
  {
    "Description": "Returns a list of non-compliant (unencrypted) databases",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbTde -SqlInstance sql2017, sql2016, sql2012\nReturns a list of non-compliant (unencrypted) databases for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbTde -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\access.csv -NoTypeInformation\nReturns a list of non-compliant (unencrypted) databases for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\access.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of non-compliant (unencrypted) databases",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbTde",
    "Syntax": "Get-DbsDbTde [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbTde",
    "Tags": [
      "V-79115",
      "V-79117",
      "V-79205",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets all of the temporal tables in the database",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbTemporalTable -SqlInstance sql2017, sql2016, sql2012\nGets all of the temporal tables in all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbTemporalTable -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\temporal.csv -NoTypeInformation\nGets all of the temporal tables in all databases on sql2017, sql2016 and sql2012 to D:\\disa\\temporal.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets all of the temporal tables in the database",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbTemporalTable",
    "Syntax": "Get-DbsDbTemporalTable [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbTemporalTable",
    "Tags": "V-79069"
  },
  {
    "Description": "Returns a list trustworthy databases",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbTrustworthy -SqlInstance sql2017, sql2016, sql2012\nReturns a list of all trustworthy databases.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbTrustworthy -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\trustworthy.csv -NoTypeInformation\nExports all trustworthy databases for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\trustworthy.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list trustworthy databases",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbTrustworthy",
    "Syntax": "Get-DbsDbTrustworthy [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbTrustworthy",
    "Tags": "V-79071"
  },
  {
    "Description": "Returns a list of all users for a database. These users are presumed to be authorized.",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbUser -SqlInstance sql2017, sql2016, sql2012\nReturns a list of all users for a database. These users are presumed to be authorized.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbUser -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\authorized.csv -NoTypeInformation\nExports authorized users for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\authorized.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of all users for a database. These users are presumed to be authorized.",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsDbUser",
    "Syntax": "Get-DbsDbUser [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsDbUser",
    "Tags": ""
  },
  {
    "Description": "Gets a list of non-compliant endpoint encryption algorithms",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsEndpointEncryption -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant endpoint encryption algorithms on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsEndpointEncryption -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\startupproc.csv -NoTypeInformation\nGets a list of non-compliant endpoint encryption algorithms on sql2017, sql2016 and sql2012 to D:\\disa\\startupproc.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets a list of non-compliant endpoint encryption algorithms",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsEndpointEncryption",
    "Syntax": "Get-DbsEndpointEncryption [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsEndpointEncryption",
    "Tags": [
      "V-79323",
      "V-79325",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets non-compliant External Scripts Enabled settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsExternalScripts -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant External Scripts Enabled settings from sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets non-compliant External Scripts Enabled settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsExternalScripts",
    "Syntax": "Get-DbsExternalScripts [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsExternalScripts",
    "Tags": [
      "V-79347",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Returns a list of all features that may be not required and must be documented",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsFeature -ComputerName sql2016, sql2017, sql2012\nGets all instances that do not have an SPN from sql2016, sql2017 and sql2012",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of all features that may be not required and must be documented",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsFeature",
    "Syntax": "Get-DbsFeature [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsFeature",
    "Tags": [
      "V-79173",
      "V-79175",
      "V-79247"
    ]
  },
  {
    "Description": "Gets non-compliant Filestream Access settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsFilestreamAccess -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Filestream Access settings from sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets non-compliant Filestream Access settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsFilestreamAccess",
    "Syntax": "Get-DbsFilestreamAccess [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsFilestreamAccess",
    "Tags": [
      "V-79329",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Returns a list of computers that are not FIPS compliant",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsFips -ComputerName sql2016, sql2017, sql2012\nGets FIPS disabled state from sql2016, sql2017 and sql2012",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of computers that are not FIPS compliant",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsFips",
    "Syntax": "Get-DbsFips [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsFips",
    "Tags": [
      "V-67871",
      "V-79113",
      "V-79197",
      "V-79199",
      "V-79203",
      "V-79305",
      "V-79307",
      "V-79309",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets non-compliant Hadoop Connectivity settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsHadoopConnectivity -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Hadoop Connectivity settings from sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets non-compliant Hadoop Connectivity settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsHadoopConnectivity",
    "Syntax": "Get-DbsHadoopConnectivity [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsHadoopConnectivity",
    "Tags": [
      "V-79341",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets all non-compliant Instant File Initialization (IFI) settings from all instances on a computer",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsIFI -ComputerName sql01\nGets all non-compliant Instant File Initialization (IFI) settings from all instances on sql01",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets all non-compliant Instant File Initialization (IFI) settings from all instances on a computer",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsIFI",
    "Syntax": "Get-DbsIFI [[-ComputerName] <DbaInstanceParameter[]>] [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsIFI",
    "Tags": [
      "V-79213",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets a list of linked servers and their logins",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsLinkedServer -SqlInstance sql2017, sql2016, sql2012\nGets a list of linked servers and their logins for sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsLinkedServer -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\linkedservers.csv -NoTypeInformation\nGets a list of linked servers and their logins for sql2017, sql2016 and sql2012 and exports them to D:\\DISA\\linkedservers.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets a list of linked servers and their logins",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsLinkedServer",
    "Syntax": "Get-DbsLinkedServer [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsLinkedServer",
    "Tags": "V-79183"
  },
  {
    "Description": "Gets a list of Windows administrators on a SQL Server",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsLocalAdmin -ComputerName sql01\nGets a list of Windows administrators on a SQL Server",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets a list of Windows administrators on a SQL Server",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsLocalAdmin",
    "Syntax": "Get-DbsLocalAdmin [[-ComputerName] <DbaInstanceParameter[]>] [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsLocalAdmin",
    "Tags": "V-79237"
  },
  {
    "Description": "Gets a list of all logins",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsLogin -SqlInstance sql2017, sql2016, sql2012\nGets a list of all logins from sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets a list of all logins",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsLogin",
    "Syntax": "Get-DbsLogin [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsLogin",
    "Tags": "V-79201"
  },
  {
    "Description": "Gets non-compliant login properties",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsLoginProperty -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant login properties from sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets non-compliant login properties",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsLoginProperty",
    "Syntax": "Get-DbsLoginProperty [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsLoginProperty",
    "Tags": [
      "V-79191",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Returns a list of any server that has mixed mode enabled",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsMixedMode -SqlInstance sql2017, sql2016, sql2012\nReturns a list of any server that has mixed mode enabled",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of any server that has mixed mode enabled",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsMixedMode",
    "Syntax": "Get-DbsMixedMode [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsMixedMode",
    "Tags": [
      "V-79121",
      "V-79355"
    ]
  },
  {
    "Description": "Gets non-compliant Ole Automation Procedures settings.",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsOleAutomation -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Ole Automation Procedures settings from sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets non-compliant Ole Automation Procedures settings.",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsOleAutomation",
    "Syntax": "Get-DbsOleAutomation [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsOleAutomation",
    "Tags": [
      "V-79333",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets a list of instance permissions using the 'Instance permissions assignments to logins and roles.sql' file provided by DISA",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of instance permissions for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of instance permissions for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsPermission -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\instanceperms.csv -NoTypeInformation\nExports a list of instance permissions for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\instanceperms.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets a list of instance permissions using the 'Instance permissions assignments to logins and roles.sql' file provided by DISA",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsPermission",
    "Syntax": "Get-DbsPermission [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsPermission",
    "Tags": "V-79125"
  },
  {
    "Description": "Gets non-compliant Allow Polybase Export settings.",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsPolybaseExport -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Allow Polybase Export settings from sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets non-compliant Allow Polybase Export settings.",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsPolybaseExport",
    "Syntax": "Get-DbsPolybaseExport [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsPolybaseExport",
    "Tags": [
      "V-79343",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Review server-level securables and built-in role membership to ensure only authorized users have privileged access and the ability to create server-level objects and grant permissions to themselves or others",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsPrivilegedLogin -SqlInstance sql2017, sql2016, sql2012\nReview server-level securables and built-in role membership to ensure only authorized users have privileged access and the ability to create server-level objects and grant permissions to themselves \r\nor others for sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Review server-level securables and built-in role membership to ensure only authorized users have privileged access and the ability to create server-level objects and grant permissions to themselves or others",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsPrivilegedLogin",
    "Syntax": "Get-DbsPrivilegedLogin [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsPrivilegedLogin",
    "Tags": "V-79219"
  },
  {
    "Description": "Gets all non-compliant protocols enabled from all instances on a computer",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsProtocol -ComputerName sql01\nGets all non-compliant protocols enabled from all instances on sql01",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets all non-compliant protocols enabled from all instances on a computer",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsProtocol",
    "Syntax": "Get-DbsProtocol [[-ComputerName] <DbaInstanceParameter[]>] [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsProtocol",
    "Tags": [
      "V-79185",
      "V-79241",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets non-compliant Remote Access settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsRemoteAccess -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Remote Access settings from sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets non-compliant Remote Access settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsRemoteAccess",
    "Syntax": "Get-DbsRemoteAccess [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsRemoteAccess",
    "Tags": [
      "V-79337",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets non-compliant Remote Data Archive settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsRemoteDataArchive -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Remote Data Archive settings from sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets non-compliant Remote Data Archive settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsRemoteDataArchive",
    "Syntax": "Get-DbsRemoteDataArchive [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsRemoteDataArchive",
    "Tags": [
      "V-79345",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets non-compliant Replication Xp settings.",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsReplicationXp -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant Replication Xp settings from sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets non-compliant Replication Xp settings.",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsReplicationXp",
    "Syntax": "Get-DbsReplicationXp [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsReplicationXp",
    "Tags": [
      "V-79351",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets a list of non-compliant logins named 'sa' or 'sa' accounts that are still enabled",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsSaAccount -SqlInstance sql2017, sql2016, sql2012\nGets a list of logins named 'sa' or 'sa' accounts that are still enabled from sql2017, sql2016, and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets a list of non-compliant logins named 'sa' or 'sa' accounts that are still enabled",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsSaAccount",
    "Syntax": "Get-DbsSaAccount [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsSaAccount",
    "Tags": [
      "V-79319",
      "V-79317",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Returns a list of prohibited (non-compliant) sample databases",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>GetDbsSampleDatabase -SqlInstance sql2017, sql2016, sql2012\nReturns a list of prohibited sample databases for sql2017, sql2016, and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>GetDbsSampleDatabase -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\sampledbs.csv -NoTypeInformation\nExports a list of prohibited sample databases for sql2017, sql2016 and sql2012 to D:\\disa\\sampledbs.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of prohibited (non-compliant) sample databases",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsSampleDatabase",
    "Syntax": "Get-DbsSampleDatabase [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsSampleDatabase",
    "Tags": [
      "V-79195",
      "V-79171",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets SQL services and service accounts",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsServiceAccount -ComputerName sql01\nGets SQL services and service accounts",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets SQL services and service accounts",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsServiceAccount",
    "Syntax": "Get-DbsServiceAccount [[-ComputerName] <DbaInstanceParameter[]>] [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsServiceAccount",
    "Tags": "V-79245"
  },
  {
    "Description": "Returns a list of accounts that have installed or modified SQL Server",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsSetupAccount -ComputerName sql2016, sql2017, sql2012\nReturns a list of accounts that have isntalled or modified SQL Server on sql2016, sql2017 and sql2012",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of accounts that have installed or modified SQL Server",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsSetupAccount",
    "Syntax": "Get-DbsSetupAccount [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsSetupAccount",
    "Tags": "V-79167"
  },
  {
    "Description": "Gets non-compliant CLR settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsSqlClr -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant CLR settings from sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets non-compliant CLR settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsSqlClr",
    "Syntax": "Get-DbsSqlClr [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsSqlClr",
    "Tags": [
      "V-79179",
      "V-79243",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets a list of startup procedures",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsStartupProcedure -SqlInstance sql2017, sql2016, sql2012\nGets a list of startup procedures for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsStartupProcedure -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\startupproc.csv -NoTypeInformation\nExports a list of startup procedures for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\startupproc.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets a list of startup procedures",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsStartupProcedure",
    "Syntax": "Get-DbsStartupProcedure [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsStartupProcedure",
    "Tags": "V-79321"
  },
  {
    "Description": "Parses the U_MS_SQL_Server_2014_Database_STIG_V1R6_Manual-xccdf style XML files from DISA into PowerShell objects",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS > Get-DbsStig\nReturn checklsits for database and instance for SQL Server 2014 and 2016\n-------------------------- EXAMPLE 2 --------------------------\nPS > Get-DbsStig -Version 2014\nReturn checklsits for database and instance for SQL Server 2014 only",
    "Params": [
      [
        "Path",
        "The Path to the STIG xml file. Not required, as they've been included.",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "Version",
        "By default, SQL Server 2014 and above stigs are returned. This allows you to filter by version.",
        "",
        false,
        "false",
        ""
      ]
    ],
    "Synopsis": "Parses the U_MS_SQL_Server_2014_Database_STIG_V1R6_Manual-xccdf style XML files from DISA into PowerShell objects",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsStig",
    "Syntax": "Get-DbsStig [[-Path] <Object[]>] [[-Version] <Int32[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsStig"
  },
  {
    "Description": "Gets permissions that were identified as not allowed in the check content",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsSystemPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit states on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsSystemPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit states on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsSystemPermission -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\auditstates.csv -NoTypeInformation\nGets a list of non-compliant audit states sql2017, sql2016 and sql2012 to D:\\disa\\auditstates.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets permissions that were identified as not allowed in the check content",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsSystemPermission",
    "Syntax": "Get-DbsSystemPermission [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsSystemPermission",
    "Tags": [
      "V-79129",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Returns all Tcp Ports in use by SQL Server",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsTcpPort -ComputerName server01, server02\nReturns all Tcp Ports in use by SQL Server on server01 and server02",
    "Params": [
      [
        "ComputerName",
        "The target server or instance.",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns all Tcp Ports in use by SQL Server",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsTcpPort",
    "Syntax": "Get-DbsTcpPort [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsTcpPort",
    "Tags": "V-79187"
  },
  {
    "Description": "Returns a list of non-compliant time sources",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsTimeSource -ComputerName sql01\nReturns a list of non-compliant time sources",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of non-compliant time sources",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsTimeSource",
    "Syntax": "Get-DbsTimeSource [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsTimeSource",
    "Tags": [
      "V-79233",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Checks to see if trace flag 3625 to hide system information form non-sysadmins in error messages",
    "Alias": "",
    "Author": "Tracy Boggiano (@TracyBoggiano), databasesuperhero.com",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsTraceFlag -SqlInstance sql2017, sql2016, sql2012\nGets trace flag on servers.",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Checks both startup params and trace flags to see if trace flag 3625 is set",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsTraceFlag",
    "Syntax": "Get-DbsTraceFlag [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsTraceFlag",
    "Tags": [
      "V-79097",
      "V-79217",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets non-compliant User Options settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsUserOptions -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant User Options settings from sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets non-compliant User Options settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsUserOptions",
    "Syntax": "Get-DbsUserOptions [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsUserOptions",
    "Tags": [
      "V-79335",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets non-compliant xp_cmdshell settings",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsXPCmdShell -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant xp_cmdshell settings from sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets non-compliant xp_cmdshell settings",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsXPCmdShell",
    "Syntax": "Get-DbsXPCmdShell [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsXPCmdShell",
    "Tags": [
      "V-79177",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Gets a list of registry extended stored procedure permissions",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsXpPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of registry extended stored procedure permissions for all databases on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsXpPermission -SqlInstance sql2017, sql2016, sql2012 | Export-Csv -Path D:\\DISA\\instanceperms.csv -NoTypeInformation\nExports a list of registry extended stored procedure permissions for all databases on sql2017, sql2016 and sql2012 to D:\\disa\\instanceperms.csv",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Gets a list of registry extended stored procedure permissions",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Get-DbsXpPermission",
    "Syntax": "Get-DbsXpPermission [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Get-DbsXpPermission",
    "Tags": "V-79327"
  },
  {
    "Description": "Installs the supplemental SQL Server Audit provided by DISA",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Install-DbsAudit -SqlInstance sql2017, sql2016, sql2012\nDetect version and create appropriate audit from DISA, output to DATA\\Stig\\, shutdown on failure\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Install-DbsAudit -SqlInstance sql2017 -SqlCredential sqladmin -Path C:\\temp -OnFaiure Continue\nLogin as sqladmin, detect version and create appropriate audit from DISA, output to C:\\temp, continue on failure\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbaRegServer -SqlInstance sqlcentral | Install-DbaDisaStigAudit\nInstalls disa stig on all servers on the CMS",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Name",
        "The name of the audit and audit specification. Defaults to DISA's default of DISA_STIG.",
        "",
        false,
        "false",
        "DISA_STIG"
      ],
      [
        "Path",
        "The path where the audit files will be created. Defaults to default data directory + STIG. Creates the directory if it does not exist.",
        "",
        false,
        "false",
        ""
      ],
      [
        "MaxSize",
        "The max size of each audit file. Defaults to 10MB.",
        "",
        false,
        "false",
        "10 MB"
      ],
      [
        "MaxFiles",
        "The max number of files to keep. Defaults to 50.",
        "",
        false,
        "false",
        "50"
      ],
      [
        "Reserve",
        "Sets the reserve of disk space. Defaults to OFF.",
        "",
        false,
        "false",
        "OFF"
      ],
      [
        "QueueDelay",
        "Sets the queue delay of the audit. Defaults to 1000.",
        "",
        false,
        "false",
        "1000"
      ],
      [
        "OnFailure",
        "Instructs SQL Server of what to do on failure. Defaults to SHUTDOWN. Options include 'FAIL_OPERATION', 'SHUTDOWN', 'CONTINUE'.",
        "",
        false,
        "false",
        "SHUTDOWN"
      ]
    ],
    "Synopsis": "Installs the supplemental SQL Server Audit provided by DISA",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Install-DbsAudit",
    "Syntax": "Install-DbsAudit [-SqlInstance] <DbaInstanceParameter[]> [-SqlCredential <PSCredential>] [-Name <String>] [-Path <String>] [-MaxSize <String>] [-MaxFiles <String>] [-Reserve <String>] [-QueueDelay <String>] [-OnFailure <String>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Install-DbsAudit"
  },
  {
    "Description": "Moves .sqlaudit files to a central repository using UNC shares",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Move-DbsAuditFile -SqlInstance sql2017\nMove it",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances\nThis is required to get specific information about the paths to modify. The base computer name is also used to\r\nperform the actual modifications",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Path",
        "Pat dat",
        "",
        false,
        "false",
        ""
      ],
      [
        "Destination",
        "Central repo",
        "",
        false,
        "false",
        ""
      ],
      [
        "NoCompress",
        "Skip zip",
        "",
        false,
        "false",
        "False"
      ]
    ],
    "Synopsis": "Moves .sqlaudit files to a central repository using UNC shares",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Move-DbsAuditFile",
    "Syntax": "Move-DbsAuditFile [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Path] <String[]>] [[-Destination] <String>] [-NoCompress] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Move-DbsAuditFile",
    "Tags": [
      "V-79311",
      "V-79223",
      "V-79225"
    ]
  },
  {
    "Description": "Creates a documentation template in markdown that makes it easy to provide the necessary documentation to auditors",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS > New-DbsDocTemplate -FilePath C:\\temp\\sql2016.md\nCreates a DISA documentation template for 2016\n-------------------------- EXAMPLE 2 --------------------------\nPS > New-DbsDocTemplate -FilePath C:\\temp\\sql2014.md -Version 2014\nCreates a DISA documentation template for 2014",
    "Params": [
      [
        "FilePath",
        "The output markdown file path",
        "",
        true,
        "false",
        ""
      ],
      [
        "Version",
        "The SQL Server version. 2016 by default.",
        "",
        false,
        "false",
        "2016"
      ],
      [
        "Include",
        "What parts to include in the output",
        "",
        false,
        "false",
        "@(\"Description\", \"FixText\", \"Check\")"
      ]
    ],
    "Synopsis": "Creates a documentation template in markdown that makes it easy to provide the necessary documentation to auditors",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "New-DbsDocTemplate",
    "Syntax": "New-DbsDocTemplate [-FilePath] <String> [[-Version] <Int32>] [[-Include] <String[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "New-DbsDocTemplate"
  },
  {
    "Description": "Removes non-compliant audit states\n\nIf you remove permissions for 'NT AUTHORITY\\SYSTEM' using this command and they continue to persist, check to ensure\nthat the permissions are not granted by a role such as sysadmin",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Remove-DbsSystemPermission -SqlInstance sql2017, sql2016, sql2012\nGets a list of non-compliant audit states on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Remove-DbsSystemPermission -SqlInstance sql2017, sql2016 and sql2012\nRemoves all non-compliant permissions for NT AUTHORITY\\SYSTEM on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsSystemPermission -SqlInstance sql2014 | Out-GridView -PassThru | Remove-DbsSystemPermission\nGets a list of non-compliant permissions for NT AUTHORITY\\SYSTEM, prompts to select specific permissions, then removes the selected permissions",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows piping from Get-DbsSystemPermission",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Remoes non-compliant audit states",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Remove-DbsSystemPermission",
    "Syntax": "Remove-DbsSystemPermission [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <PSObject[]>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Remove-DbsSystemPermission",
    "Tags": "V-79129"
  },
  {
    "Description": "Removes unauthorized users from roles and/or sets the owner of the database to an authorized login",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbOwnerFixedServerRole -SqlInstance sql2017, sql2016, sql2012 | Remove-DbsDbOwnerFixedServerRole\nRemoves unauthorized users from their associated roles\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbOwnerFixedServerRole -SqlInstance sql2017, sql2016, sql2012 | Remove-DbsDbOwnerFixedServerRole -Confirm:$false\nRemoves unauthorized users from their associated roles and does not prompt\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Get-DbsDbOwnerFixedServerRole -SqlInstance sql2017, sql2016, sql2012 | Out-GridView -Passthru | Remove-DbsDbOwnerFixedServerRole -Type SetOwner -NewOwner AD\\chantel.phillip -Confirm:$false\nSets the owner of the database to an authorized login, AD\\chantel.phillip",
    "Params": [
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbsDbOwnerFixedServerRole",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "Type",
        "The type of repair - remove user from role, set a new db owner, or both\nOptions: \"RemoveRoleMember\", \"SetOwner\"",
        "",
        false,
        "false",
        "RemoveRoleMember"
      ],
      [
        "NewOwner",
        "The type of repair - remove user from role, set a new db owner, or both",
        "",
        false,
        "false",
        ""
      ]
    ],
    "Synopsis": "Removes unauthorized users from roles and/or sets the owner of the database to an authorized login",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Repair-DbsDbOwnerFixedServerRole",
    "Syntax": "Repair-DbsDbOwnerFixedServerRole [[-InputObject] <PSObject[]>] [[-Type] <String[]>] [[-NewOwner] <String>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Repair-DbsDbOwnerFixedServerRole",
    "Tags": "V-79111"
  },
  {
    "Description": "Removes non-compliant alter permissions",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbAlterPermission -SqlInstance sql2017, sql2016, sql2012 | Revoke-DbsDbAlterPermission\nRevokes non-compliant alter permissions on sql2017, sql2016, sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbAlterPermission -SqlInstance sql2017, sql2016, sql2012 | Out-GridView -Passthru | Revoke-DbsDbAlterPermission -Confirm:$false\nRevokes _selected_ non-compliant alter permissions on sql2017, sql2016, sql2012, does not prompt",
    "Params": [
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbsDbAlterPermission",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Removes non-compliant alter permissions",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Revoke-DbsDbAlterPermission",
    "Syntax": "Revoke-DbsDbAlterPermission [[-InputObject] <PSObject[]>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Revoke-DbsDbAlterPermission",
    "Tags": [
      "V-79109",
      "V-79075",
      "V-79081"
    ]
  },
  {
    "Description": "Sets the required permissions for SQL Server directories\n\nBy default, it will detect and secure the default Data, Log and Backup directories",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsAcl -SqlInstance sql2017, sql2016, sql2012 -Account \"AD\\SQL Admins\" -Owner \"AD\\SQL Service\"\nSets permissions for the default data, log and backups on sql2017, sql2016, sql2012\nAdds appropriate permissions for the \"AD\\SQL Admins\" group as well as the SQL Server service accountsas Full Access\nAlso sets the owner of the folder to \"AD\\SQL Service\"\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbaRegServer -SqlInstance sqlcentral | Set-DbsAcl -Account \"AD\\SQL Admins\" -Owner \"AD\\SQL Service\"\nSets the appropriate permissions for all SQL Servers stored in the sqlcentral registered server",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances\nThis is required to get specific information about the paths to modify\nThe base computer name is also used to perform the actual modifications",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Owner",
        "The account that will be set as the folder owner",
        "",
        true,
        "false",
        ""
      ],
      [
        "Account",
        "The account name or names that are to be granted permissions along with the service accounts",
        "",
        true,
        "false",
        ""
      ],
      [
        "Path",
        "By default, the ACLs on the paths to the data, log and backup files will be modified\nIf you want to set permissions on a specific path, use this option\nNote that if your Backup directory is a UNC share, it will be skipped",
        "",
        false,
        "false",
        ""
      ]
    ],
    "Synopsis": "Sets the permissions required by DISA for SQL Server directories",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Set-DbsAcl",
    "Syntax": "Set-DbsAcl [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Credential] <PSCredential>] [-Owner] <String> [-Account] <String[]> [[-Path] <String[]>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Set-DbsAcl",
    "Tags": [
      "V-79215",
      "V-79151",
      "V-79153",
      "V-79155",
      "V-79163"
    ]
  },
  {
    "Description": "Sets \"Both failed and successful logins\"",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsAuditLogin -SqlInstance sql2017, sql2016, sql2012\nSets \"Both failed and successful logins\" on sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Sets \"Both failed and successful logins\"",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Set-DbsAuditLogin",
    "Syntax": "Set-DbsAuditLogin [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Set-DbsAuditLogin",
    "Tags": [
      "V-79297",
      "V-79287",
      "V-79289"
    ]
  },
  {
    "Description": "Create the audit maintainer role, sets the permissions for the role, and adds logins",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsAuditMaintainer -SqlInstance sql2017, sql2016, sql2012 -Login \"AD\\SQL Admins\"\nSet permissions for the SERVER_AUDIT_MAINTAINERS role on sql2017, sql2016, sql2012 for user AD\\SQL Admins on Prod database.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Set-DbsAuditMaintainer -SqlInstance sql2017, sql2016, sql2012 -Role auditmaintainers -Login \"AD\\SQL Admins\"\nSet permissions for the auditmaintainers role on sql2017, sql2016, sql2012 for user AD\\SQL Admins on Prod database.",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Role",
        "Name to be given the audit maintainer role",
        "",
        false,
        "false",
        "SERVER_AUDIT_MAINTAINERS"
      ],
      [
        "Login",
        "The login or logins that are to be granted permissions. This should be a Windows Group or you may violate another STIG",
        "",
        true,
        "false",
        ""
      ]
    ],
    "Synopsis": "Create the audit maintainer role, sets the permissions for the role, and adds logins\n\nNOTE! This command revokes permz.",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Set-DbsAuditMaintainer",
    "Syntax": "Set-DbsAuditMaintainer [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Role] <String>] [-Login] <String[]> [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Set-DbsAuditMaintainer",
    "Tags": [
      "V-79135",
      "V-79143"
    ]
  },
  {
    "Description": "Sets startup state for compliance audit to ON",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsAuditStartupState -SqlInstance sql2017, sql2016, sql2012\nSets startup state for compliance audit to ON on sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Audit",
        "The name of the DISA Audit",
        "",
        false,
        "false",
        "(Get-PSFConfigValue -FullName dbadisa.app.auditname)"
      ]
    ],
    "Synopsis": "Sets startup state for compliance audit to ON",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Set-DbsAuditStartupState",
    "Syntax": "Set-DbsAuditStartupState [-SqlInstance] <DbaInstanceParameter[]> [[-Audit] <String[]>] [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Set-DbsAuditStartupState",
    "Tags": "V-79141"
  },
  {
    "Description": "Sets the max number of UserConnection\n\n\"If a mechanism other than a logon trigger is used, verify its correct operation by the appropriate means.\"",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsConnectionLimit -SqlInstance sql2017, sql2016, sql2012 -Value 5000\nSets the max number of connections to 5000\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Set-DbsConnectionLimit -SqlInstance sql2017, sql2016, sql2012 -Value 5000 -WhatIf\nShows what would happen if the command would run",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Value",
        "The max number of connections that can connect to the SQL Server",
        "",
        true,
        "false",
        "0"
      ]
    ],
    "Synopsis": "Sets the max number of UserConnections",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Set-DbsConnectionLimit",
    "Syntax": "Set-DbsConnectionLimit [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-Value] <Int32> [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Set-DbsConnectionLimit",
    "Tags": "V-79119"
  },
  {
    "Description": "Creates the database audit maintainer role, sets the permissions for the role, adds logins and revokes permissions for other accounts",
    "Alias": "",
    "Author": "Tracy Boggiano (@TracyBoggiano), databasesuperhero.com",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsDbAuditMaintainer -SqlInstance sql2017, sql2016, sql2012 -User \"AD\\SQL Admins\"\nSet permissions for the DATABASE_AUDIT_MAINTAINERS role on sql2017, sql2016, sql2012 for user AD\\SQL Admins on Prod database.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Set-DbsDbAuditMaintainer -SqlInstance sql2017, sql2016, sql2012 -Role auditmaintainers -User \"AD\\SQL Admins\"\nSet permissions for the auditmaintainers role on sql2017, sql2016, sql2012 for user AD\\SQL Admins on Prod database.",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ],
      [
        "Role",
        "Name to be given the audit maintainer role",
        "",
        false,
        "false",
        "DATABASE_AUDIT_MAINTAINERS"
      ],
      [
        "User",
        "The login or logins that are to be granted permissions. This should be a Windows Group or you may violate another STIG",
        "",
        true,
        "false",
        ""
      ],
      [
        "InputObject",
        "Allows piping from Get-DbsDbAuditMaintainer",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Creates the database audit maintainer role, sets the permissions for the role, adds logins and revokes permissions for other accounts",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Set-DbsDbAuditMaintainer",
    "Syntax": "Set-DbsDbAuditMaintainer [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [[-Role] <String>] [-User] <String[]> [[-InputObject] <Database[]>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Set-DbsDbAuditMaintainer",
    "Tags": "V-79073"
  },
  {
    "Description": "Sets databases to a non-default growth and growth type. 64MB by default.",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsDbFileSize -SqlInstance sql2017, sql2016, sql2012\nSets all non-default sized database files on sql2017, sql2016, sql2012 to 64MB.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbaDatabase -SqlInstance sql2016 -Database test | Set-DbsDbFileSize -GrowthType GB -Growth 1\nSets the test database on sql2016 to a growth of 1GB\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\>Set-DbsDbFileSize -SqlInstance sql2017, sql2016, sql2012 -WhatIf\nShows what would happen if the command were executed",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "GrowthType",
        "The growth type, MB by default - valid values are MB, KB, GB or TB. MB by default",
        "",
        false,
        "false",
        "MB"
      ],
      [
        "Growth",
        "The growth value. 64 by default.",
        "",
        false,
        "false",
        "64"
      ],
      [
        "InputObject",
        "Allows piping from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Sets databases to a non-default growth and growth type. 64MB by default.",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Set-DbsDbFileSize",
    "Syntax": "Set-DbsDbFileSize [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-GrowthType] <String>] [[-Growth] <Int32>] [[-InputObject] <Database[]>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Set-DbsDbFileSize",
    "Tags": ""
  },
  {
    "Description": "Sets all user databases to the FULL recovery model",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsDbRecoveryModel -SqlInstance sql2017, sql2016, sql2012\nSets all user databases to the FULL recovery model on sql2017, sql2016, and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows piping from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Sets all user databases to the FULL recovery model",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Set-DbsDbRecoveryModel",
    "Syntax": "Set-DbsDbRecoveryModel [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Set-DbsDbRecoveryModel",
    "Tags": "V-79083"
  },
  {
    "Description": "Sets a schema owner\n\nBasically performs ALTER AUTHORIZATION ON SCHEMA::[<Schema Name>] TO [<Principal Name>]",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsDbSchemaOwner -SqlInstance sql2017, sql2016, sql2012 | Set-DbsDbSchemaOwner\nSets a schema owner for schemas per db on sql2017, sql2016, sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsDbSchemaOwner -SqlInstance sql2017, sql2016, sql2012 | Out-GridView -Passthru | Set-DbsDbSchemaOwner -Owner ad\\dbschemaowner -Confirm:$false\nSets a schema owner for _selected_ schemas on sql2017, sql2016, sql2012, does not prompt",
    "Params": [
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbsDbSchemaOwner",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "Owner",
        "Sets the new owner",
        "",
        false,
        "false",
        ""
      ]
    ],
    "Synopsis": "Sets a schema owner",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Set-DbsDbSchemaOwner",
    "Syntax": "Set-DbsDbSchemaOwner [[-InputObject] <PSObject[]>] [[-Owner] <String>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Set-DbsDbSchemaOwner",
    "Tags": "V-79077"
  },
  {
    "Description": "Sets non-compliant endpoint encryption algorithms for non-compliant endpoints",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Get-DbsEndpointEncryption -SqlInstance sql2017, sql2016, sql2012 | Set-DbsEndpointEncryption\nSets non-compliant endpoint encryption algorithms to AES on sql2017, sql2016 and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Get-DbsEndpointEncryption -SqlInstance sql2017, sql2016, sql2012 | Out-GridView -Passthru | Set-DbsEndpointEncryption\nSets selected non-compliant endpoint encryption algorithms to AES on sql2017, sql2016 and sql2012",
    "Params": [
      [
        "InputObject",
        "Allows piping from Get-DbaEndpoint",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Sets non-compliant endpoint encryption algorithms for non-compliant endpoints",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Set-DbsEndpointEncryption",
    "Syntax": "Set-DbsEndpointEncryption [-InputObject] <Endpoint[]> [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Set-DbsEndpointEncryption",
    "Tags": [
      "V-79323",
      "V-79325"
    ]
  },
  {
    "Description": "Sets login properties, PasswordExpirationEnabled and PasswordPolicyEnforced, to true",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsLoginProperty -SqlInstance sql2017, sql2016, sql2012\nOnly returns non-compliant login properties from sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Sets login properties, PasswordExpirationEnabled and PasswordPolicyEnforced, to true",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Set-DbsLoginProperty",
    "Syntax": "Set-DbsLoginProperty [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Set-DbsLoginProperty",
    "Tags": "V-79191"
  },
  {
    "Description": "Sets trace flag 3625 to hide information from non-sysadmins in error messages",
    "Alias": "",
    "Author": "Tracy Boggiano (@TracyBoggiano), databasesuperhero.com",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Set-DbsTraceFlag -SqlInstance sql2017, sql2016, sql2012\nSets the 3625 trace flag on sql2017, sql2016, and sql2012\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\>Set-DbsTraceFlag -SqlInstance sql2017, sql2016, sql2012 -Confirm:$false\nSets the 3625 trace flag on sql2017, sql2016, and sql2012 without confirmation prompts",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Sets trace flag 3625",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Set-DbsTraceFlag",
    "Syntax": "Set-DbsTraceFlag [-SqlInstance] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [-WhatIf] [-Confirm] [<CommonParameters>]",
    "CommandName": "Set-DbsTraceFlag",
    "Tags": [
      "V-79097",
      "V-79217"
    ]
  },
  {
    "Description": "Obtains evidence that software patches are consistently applied to SQL Server within the time frame defined for each patch",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Test-DbsBuild -SqlInstance sql2017, sql2016, sql2012\nObtains evidence that software patches are consistently applied to SQL Server within the time frame defined for each patch",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Obtains evidence that software patches are consistently applied to SQL Server within the time frame defined for each patch",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Test-DbsBuild",
    "Syntax": "Test-DbsBuild [-SqlInstance] <DbaInstanceParameter[]> [[-SqlCredential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Test-DbsBuild",
    "Tags": "V-79249"
  },
  {
    "Description": "Tests a db to see if it's got contraints",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Test-DbsDbInputValidity -SqlInstance sql2017, sql2016, sql2012\nTests a db to see if it's got contraints on sql2017, sql2016 and sql2012",
    "Params": [
      [
        "SqlInstance",
        "The target SQL Server instance or instances",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows databases to be piped in from Get-DbaDatabase",
        "",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Tests a db to see if it's got contraints",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Test-DbsDbInputValidity",
    "Syntax": "Test-DbsDbInputValidity [[-SqlInstance] <DbaInstanceParameter[]>] [[-SqlCredential] <PSCredential>] [[-InputObject] <Database[]>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Test-DbsDbInputValidity",
    "Tags": "V-79095"
  },
  {
    "Description": "Returns a list of non-compliant disks that fall below the threshold (25% by default)",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Test-DbsDiskSpace -ComputerName sql01\nReturns a list of non-compliant disks that fall below the threshold (25% by default)",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "InputObject",
        "Allows piping from Get-DbaDiskSpace",
        "",
        false,
        "true (ByValue)",
        ""
      ],
      [
        "Threshold",
        "The minimum disk space free threshold",
        "",
        false,
        "false",
        "25"
      ]
    ],
    "Synopsis": "Returns a list of non-compliant disks that fall below the threshold (25% by default)",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Test-DbsDiskSpace",
    "Syntax": "Test-DbsDiskSpace [[-ComputerName] <DbaInstanceParameter[]>] [[-Credential] <PSCredential>] [[-InputObject] <DiskSpace[]>] [[-Threshold] <Int32>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Test-DbsDiskSpace",
    "Tags": [
      "V-79229",
      "NonCompliantResults"
    ]
  },
  {
    "Description": "Tests the installation path to ensure it is not part of the Windows directory or in an application folder",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Test-DbsInstallPath -ComputerName sql01\nTests the installation path for all instances on sql01 to ensure they are not part of the Windows directory or in an application folder",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Tests the installation path to ensure it is not part of the Windows directory or in an application folder",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Test-DbsInstallPath",
    "Syntax": "Test-DbsInstallPath [[-ComputerName] <DbaInstanceParameter[]>] [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Test-DbsInstallPath",
    "Tags": "V-79169"
  },
  {
    "Description": "Tests all SQL Server related services on a server to ensure none have the same service account",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Test-DbsServiceAccount -ComputerName sql01\nTests all SQL Server related services to ensure none have the same service account",
    "Params": [
      [
        "ComputerName",
        "The target SQL Server",
        "cn,host,Server",
        false,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Tests all SQL Server related services on a server to ensure none have the same service account",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Test-DbsServiceAccount",
    "Syntax": "Test-DbsServiceAccount [[-ComputerName] <DbaInstanceParameter[]>] [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Test-DbsServiceAccount",
    "Tags": "V-79245"
  },
  {
    "Description": "Returns a list of instances that do not have an SPN",
    "Alias": "",
    "Author": "Chrissy LeMaire (@cl), netnerds.net",
    "Examples": "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\>Test-DbsSpn -ComputerName sql2016, sql2017, sql2012\nGets all instances that do not have an SPN from sql2016, sql2017 and sql2012",
    "Params": [
      [
        "ComputerName",
        "The target server or instance",
        "",
        true,
        "true (ByValue)",
        ""
      ]
    ],
    "Synopsis": "Returns a list of instances that do not have an SPN",
    "Availability": "Windows, Linux, macOS",
    "Links": null,
    "Name": "Test-DbsSpn",
    "Syntax": "Test-DbsSpn [-ComputerName] <DbaInstanceParameter[]> [[-Credential] <PSCredential>] [-EnableException] [<CommonParameters>]",
    "CommandName": "Test-DbsSpn",
    "Tags": "V-79123"
  }
]
